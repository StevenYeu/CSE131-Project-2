
//----------------------------------------------------
// The following code was generated by CUP v0.10k TUM Edition 20050516
// Sat Nov 21 16:06:42 PST 2015
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.Vector;

/** CUP v0.10k TUM Edition 20050516 generated parser.
  * @version Sat Nov 21 16:06:42 PST 2015
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\312\000\002\123\002\000\002\003\004\000\002\002" +
    "\004\000\002\004\003\000\002\004\002\000\002\005\003" +
    "\000\002\005\004\000\002\006\003\000\002\006\003\000" +
    "\002\006\003\000\002\006\003\000\002\006\003\000\002" +
    "\006\003\000\002\124\002\000\002\011\010\000\002\125" +
    "\002\000\002\012\011\000\002\126\002\000\002\012\011" +
    "\000\002\127\002\000\002\012\011\000\002\130\002\000" +
    "\002\013\012\000\002\131\002\000\002\013\012\000\002" +
    "\014\003\000\002\014\002\000\002\132\002\000\002\133" +
    "\002\000\002\134\002\000\002\015\015\000\002\115\003" +
    "\000\002\115\004\000\002\021\006\000\002\022\003\000" +
    "\002\022\002\000\002\023\003\000\002\023\004\000\002" +
    "\024\003\000\002\024\003\000\002\135\002\000\002\136" +
    "\002\000\002\016\013\000\002\137\002\000\002\017\012" +
    "\000\002\025\003\000\002\025\002\000\002\026\003\000" +
    "\002\026\004\000\002\027\003\000\002\140\002\000\002" +
    "\141\002\000\002\142\002\000\002\007\020\000\002\143" +
    "\002\000\002\144\002\000\002\010\015\000\002\104\003" +
    "\000\002\104\003\000\002\105\003\000\002\105\004\000" +
    "\002\102\004\000\002\101\003\000\002\101\003\000\002" +
    "\101\003\000\002\103\003\000\002\106\003\000\002\106" +
    "\003\000\002\116\003\000\002\116\002\000\002\117\003" +
    "\000\002\117\004\000\002\053\003\000\002\114\003\000" +
    "\002\114\002\000\002\113\003\000\002\113\004\000\002" +
    "\054\005\000\002\145\002\000\002\146\002\000\002\031" +
    "\007\000\002\120\003\000\002\120\002\000\002\121\003" +
    "\000\002\121\004\000\002\030\003\000\002\030\003\000" +
    "\002\030\003\000\002\030\004\000\002\030\003\000\002" +
    "\030\003\000\002\030\003\000\002\030\003\000\002\030" +
    "\003\000\002\030\003\000\002\030\003\000\002\030\003" +
    "\000\002\030\003\000\002\030\003\000\002\030\003\000" +
    "\002\107\003\000\002\107\002\000\002\110\003\000\002" +
    "\110\005\000\002\062\006\000\002\020\003\000\002\020" +
    "\002\000\002\050\004\000\002\050\002\000\002\051\003" +
    "\000\002\051\002\000\002\052\006\000\002\147\002\000" +
    "\002\150\002\000\002\032\010\000\002\033\004\000\002" +
    "\033\002\000\002\151\002\000\002\152\002\000\002\035" +
    "\007\000\002\153\002\000\002\034\014\000\002\036\004" +
    "\000\002\037\004\000\002\040\007\000\002\041\004\000" +
    "\002\041\005\000\002\042\006\000\002\043\006\000\002" +
    "\122\003\000\002\122\005\000\002\100\003\000\002\100" +
    "\003\000\002\044\003\000\002\111\003\000\002\111\002" +
    "\000\002\112\003\000\002\112\005\000\002\063\005\000" +
    "\002\063\003\000\002\154\002\000\002\064\006\000\002" +
    "\064\003\000\002\155\002\000\002\065\006\000\002\065" +
    "\003\000\002\066\005\000\002\066\003\000\002\067\005" +
    "\000\002\067\003\000\002\070\005\000\002\070\003\000" +
    "\002\071\005\000\002\071\003\000\002\072\005\000\002" +
    "\072\003\000\002\073\005\000\002\073\003\000\002\074" +
    "\005\000\002\074\003\000\002\046\003\000\002\046\003" +
    "\000\002\047\003\000\002\047\003\000\002\047\003\000" +
    "\002\047\003\000\002\057\003\000\002\057\003\000\002" +
    "\060\003\000\002\060\003\000\002\060\003\000\002\061" +
    "\003\000\002\061\003\000\002\075\004\000\002\075\004" +
    "\000\002\075\004\000\002\075\004\000\002\075\006\000" +
    "\002\075\007\000\002\075\006\000\002\075\004\000\002" +
    "\075\003\000\002\076\005\000\002\076\006\000\002\076" +
    "\005\000\002\076\004\000\002\076\006\000\002\076\003" +
    "\000\002\077\005\000\002\077\003\000\002\077\003\000" +
    "\002\077\003\000\002\077\003\000\002\077\003\000\002" +
    "\077\003\000\002\077\003\000\002\077\004\000\002\077" +
    "\003\000\002\055\006\000\002\056\005\000\002\045\003" +
    "\000\002\045\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0153\000\030\002\001\010\001\012\001\021\001\032" +
    "\001\034\001\036\001\042\001\074\001\105\001\107\001" +
    "\001\002\000\004\002\u0155\001\002\000\030\002\ufffd\010" +
    "\uffe7\012\uffe7\021\uffe7\032\007\034\uffe7\036\011\042\uffe7" +
    "\074\012\105\uffe7\107\015\001\002\000\030\002\ufff6\010" +
    "\ufff6\012\ufff6\021\ufff6\032\ufff6\034\ufff6\036\ufff6\042\ufff6" +
    "\074\ufff6\105\ufff6\107\ufff6\001\002\000\012\012\032\034" +
    "\035\036\u0146\042\036\001\002\000\030\002\ufff7\010\ufff7" +
    "\012\ufff7\021\ufff7\032\ufff7\034\ufff7\036\ufff7\042\ufff7\074" +
    "\ufff7\105\ufff7\107\ufff7\001\002\000\004\016\u0137\001\002" +
    "\000\004\105\263\001\002\000\016\010\030\012\032\021" +
    "\034\034\035\042\036\105\031\001\002\000\030\002\ufff9" +
    "\010\ufff9\012\ufff9\021\ufff9\032\ufff9\034\ufff9\036\ufff9\042" +
    "\ufff9\074\ufff9\105\ufff9\107\ufff9\001\002\000\016\010\uffe8" +
    "\012\uffe8\021\uffe8\034\uffe8\042\uffe8\105\uffe8\001\002\000" +
    "\030\002\ufffc\010\ufffc\012\ufffc\021\ufffc\032\ufffc\034\ufffc" +
    "\036\ufffc\042\ufffc\074\ufffc\105\ufffc\107\ufffc\001\002\000" +
    "\030\002\ufff5\010\ufff5\012\ufff5\021\ufff5\032\ufff5\034\ufff5" +
    "\036\ufff5\042\ufff5\074\ufff5\105\ufff5\107\ufff5\001\002\000" +
    "\030\002\ufffe\010\uffe7\012\uffe7\021\uffe7\032\007\034\uffe7" +
    "\036\011\042\uffe7\074\012\105\uffe7\107\015\001\002\000" +
    "\030\002\ufffa\010\ufffa\012\ufffa\021\ufffa\032\ufffa\034\ufffa" +
    "\036\ufffa\042\ufffa\074\ufffa\105\ufffa\107\ufffa\001\002\000" +
    "\004\002\000\001\002\000\030\002\ufff8\010\ufff8\012\ufff8" +
    "\021\ufff8\032\ufff8\034\ufff8\036\ufff8\042\ufff8\074\ufff8\105" +
    "\ufff8\107\ufff8\001\002\000\030\002\ufffb\010\ufffb\012\ufffb" +
    "\021\ufffb\032\ufffb\034\ufffb\036\ufffb\042\ufffb\074\ufffb\105" +
    "\ufffb\107\ufffb\001\002\000\012\004\uffc6\045\uffc6\067\uffc6" +
    "\106\uffc6\001\002\000\014\004\uffbc\045\uffbc\067\uffbc\073" +
    "\116\106\uffbc\001\002\000\004\106\252\001\002\000\004" +
    "\106\245\001\002\000\014\004\uffc0\045\uffc0\067\uffc0\073" +
    "\uffc0\106\uffc0\001\002\000\014\004\uffc1\045\uffc1\067\uffc1" +
    "\073\uffc1\106\uffc1\001\002\000\006\073\116\106\233\001" +
    "\002\000\012\010\040\012\032\034\035\042\036\001\002" +
    "\000\014\004\uffc2\045\uffc2\067\uffc2\073\uffc2\106\uffc2\001" +
    "\002\000\014\004\uffc3\045\uffc3\067\uffc3\073\uffc3\106\uffc3" +
    "\001\002\000\004\106\226\001\002\000\004\106\041\001" +
    "\002\000\004\007\042\001\002\000\046\004\073\017\103" +
    "\033\066\046\075\051\067\052\076\056\063\057\102\062" +
    "\100\063\065\071\071\073\104\075\062\077\055\102\101" +
    "\103\064\104\046\106\072\001\002\000\056\004\uff64\005" +
    "\uff64\011\uff64\014\uff64\020\uff64\030\uff64\037\uff64\040\uff64" +
    "\044\uff64\047\uff64\050\uff64\051\uff64\053\176\054\uff64\060" +
    "\uff64\061\uff64\062\uff64\065\uff64\067\uff64\070\uff64\072\200" +
    "\073\177\001\002\000\060\004\uff62\005\uff62\007\224\011" +
    "\uff62\014\uff62\020\uff62\030\uff62\037\uff62\040\uff62\044\uff62" +
    "\047\uff62\050\uff62\051\uff62\053\uff62\054\uff62\060\uff62\061" +
    "\uff62\062\uff62\065\uff62\067\uff62\070\uff62\072\uff62\073\uff62" +
    "\001\002\000\050\004\uff66\005\uff66\011\uff66\014\uff66\020" +
    "\uff66\030\uff66\037\uff66\040\uff66\044\uff66\047\uff66\050\uff66" +
    "\051\173\054\uff66\060\uff66\061\uff66\062\172\065\uff66\067" +
    "\uff66\070\uff66\001\002\000\076\004\uff42\005\uff42\006\uff42" +
    "\007\uff42\011\uff42\014\uff42\016\uff42\020\uff42\025\uff42\030" +
    "\uff42\037\uff42\040\uff42\044\uff42\045\uff42\046\uff42\047\uff42" +
    "\050\uff42\051\uff42\052\uff42\053\uff42\054\uff42\060\uff42\061" +
    "\uff42\062\uff42\063\uff42\065\uff42\067\uff42\070\uff42\072\uff42" +
    "\073\uff42\001\002\000\044\004\uff68\005\uff68\011\uff68\014" +
    "\uff68\020\uff68\030\uff68\037\170\040\164\044\uff68\047\167" +
    "\050\165\054\uff68\060\uff68\061\uff68\065\uff68\067\uff68\070" +
    "\uff68\001\002\000\076\004\uff46\005\uff46\006\uff46\007\uff46" +
    "\011\uff46\014\uff46\016\uff46\020\uff46\025\uff46\030\uff46\037" +
    "\uff46\040\uff46\044\uff46\045\uff46\046\uff46\047\uff46\050\uff46" +
    "\051\uff46\052\uff46\053\uff46\054\uff46\060\uff46\061\uff46\062" +
    "\uff46\063\uff46\065\uff46\067\uff46\070\uff46\072\uff46\073\uff46" +
    "\001\002\000\034\004\uff6a\005\uff6a\011\uff6a\014\uff6a\020" +
    "\uff6a\030\162\044\uff6a\054\161\060\uff6a\061\uff6a\065\uff6a" +
    "\067\uff6a\070\uff6a\001\002\000\076\004\uff4c\005\uff4c\006" +
    "\210\007\uff4c\011\uff4c\014\uff4c\016\uff4c\020\uff4c\025\211" +
    "\030\uff4c\037\uff4c\040\uff4c\044\uff4c\045\205\046\206\047" +
    "\uff4c\050\uff4c\051\uff4c\052\076\053\uff4c\054\uff4c\060\uff4c" +
    "\061\uff4c\062\uff4c\063\065\065\uff4c\067\uff4c\070\uff4c\072" +
    "\uff4c\073\uff4c\001\002\000\030\004\156\005\uff6c\011\uff6c" +
    "\014\uff6c\020\uff6c\044\uff6c\060\uff6c\061\uff6c\065\uff6c\067" +
    "\uff6c\070\uff6c\001\002\000\026\005\uff6e\011\uff6e\014\154" +
    "\020\uff6e\044\uff6e\060\uff6e\061\uff6e\065\uff6e\067\uff6e\070" +
    "\uff6e\001\002\000\076\004\uff41\005\uff41\006\uff41\007\uff41" +
    "\011\uff41\014\uff41\016\uff41\020\uff41\025\uff41\030\uff41\037" +
    "\uff41\040\uff41\044\uff41\045\uff41\046\uff41\047\uff41\050\uff41" +
    "\051\uff41\052\uff41\053\uff41\054\uff41\060\uff41\061\uff41\062" +
    "\uff41\063\uff41\065\uff41\067\uff41\070\uff41\072\uff41\073\uff41" +
    "\001\002\000\004\070\uffea\001\002\000\024\005\uff70\011" +
    "\152\020\uff70\044\uff70\060\uff70\061\uff70\065\uff70\067\uff70" +
    "\070\uff70\001\002\000\022\005\uff72\020\uff73\044\uff73\060" +
    "\uff73\061\uff73\065\uff73\067\uff73\070\uff73\001\002\000\020" +
    "\020\uff76\044\uff76\060\uff75\061\uff76\065\uff76\067\uff76\070" +
    "\uff76\001\002\000\076\004\uff3e\005\uff3e\006\uff3e\007\uff3e" +
    "\011\uff3e\014\uff3e\016\uff3e\020\uff3e\025\uff3e\030\uff3e\037" +
    "\uff3e\040\uff3e\044\uff3e\045\uff3e\046\uff3e\047\uff3e\050\uff3e" +
    "\051\uff3e\052\uff3e\053\uff3e\054\uff3e\060\uff3e\061\uff3e\062" +
    "\uff3e\063\uff3e\065\uff3e\067\uff3e\070\uff3e\072\uff3e\073\uff3e" +
    "\001\002\000\046\004\073\017\103\033\066\046\075\051" +
    "\067\052\076\056\063\057\102\062\100\063\065\071\071" +
    "\073\104\075\062\077\055\102\101\103\064\104\046\106" +
    "\072\001\002\000\076\004\uff44\005\uff44\006\uff44\007\uff44" +
    "\011\uff44\014\uff44\016\uff44\020\uff44\025\uff44\030\uff44\037" +
    "\uff44\040\uff44\044\uff44\045\uff44\046\uff44\047\uff44\050\uff44" +
    "\051\uff44\052\uff44\053\uff44\054\uff44\060\uff44\061\uff44\062" +
    "\uff44\063\uff44\065\uff44\067\uff44\070\uff44\072\uff44\073\uff44" +
    "\001\002\000\124\004\uff56\005\uff56\006\uff56\007\uff56\011" +
    "\uff56\014\uff56\016\uff56\017\uff56\020\uff56\025\uff56\030\uff56" +
    "\033\uff56\037\uff56\040\uff56\044\uff56\045\uff56\046\uff56\047" +
    "\uff56\050\uff56\051\uff56\052\uff56\053\uff56\054\uff56\056\uff56" +
    "\057\uff56\060\uff56\061\uff56\062\uff56\063\uff56\065\uff56\067" +
    "\uff56\070\uff56\071\uff56\072\uff56\073\uff56\075\uff56\077\uff56" +
    "\102\uff56\103\uff56\104\uff56\106\uff56\001\002\000\076\004" +
    "\uff40\005\uff40\006\uff40\007\uff40\011\uff40\014\uff40\016\uff40" +
    "\020\uff40\025\uff40\030\uff40\037\uff40\040\uff40\044\uff40\045" +
    "\uff40\046\uff40\047\uff40\050\uff40\051\uff40\052\uff40\053\uff40" +
    "\054\uff40\060\uff40\061\uff40\062\uff40\063\uff40\065\uff40\067" +
    "\uff40\070\uff40\072\uff40\073\uff40\001\002\000\046\004\uff39" +
    "\017\uff39\033\uff39\046\uff39\051\uff39\052\uff39\056\uff39\057" +
    "\uff39\062\uff39\063\uff39\071\uff39\073\uff39\075\uff39\077\uff39" +
    "\102\uff39\103\uff39\104\uff39\106\uff39\001\002\000\006\065" +
    "\uff7c\070\uff7c\001\002\000\004\046\124\001\002\000\076" +
    "\004\uff3c\005\uff3c\006\uff3c\007\uff3c\011\uff3c\014\uff3c\016" +
    "\uff3c\020\uff3c\025\uff3c\030\uff3c\037\uff3c\040\uff3c\044\uff3c" +
    "\045\uff3c\046\uff3c\047\uff3c\050\uff3c\051\uff3c\052\uff3c\053" +
    "\uff3c\054\uff3c\060\uff3c\061\uff3c\062\uff3c\063\uff3c\065\uff3c" +
    "\067\uff3c\070\uff3c\072\uff3c\073\uff3c\001\002\000\046\004" +
    "\073\017\103\033\066\046\075\051\067\052\076\056\063" +
    "\057\102\062\100\063\065\071\071\073\104\075\062\077" +
    "\055\102\101\103\064\104\046\106\072\001\002\000\046" +
    "\004\073\017\103\033\066\046\075\051\067\052\076\056" +
    "\063\057\102\062\100\063\065\071\071\073\104\075\062" +
    "\077\055\102\101\103\064\104\046\106\072\001\002\000" +
    "\056\004\073\012\032\017\103\033\066\034\035\042\036" +
    "\046\075\051\067\052\076\056\063\057\102\062\100\063" +
    "\065\071\071\073\104\075\062\077\055\102\101\103\064" +
    "\104\046\105\031\106\072\001\002\000\124\004\uff55\005" +
    "\uff55\006\uff55\007\uff55\011\uff55\014\uff55\016\uff55\017\uff55" +
    "\020\uff55\025\uff55\030\uff55\033\uff55\037\uff55\040\uff55\044" +
    "\uff55\045\uff55\046\uff55\047\uff55\050\uff55\051\uff55\052\uff55" +
    "\053\uff55\054\uff55\056\uff55\057\uff55\060\uff55\061\uff55\062" +
    "\uff55\063\uff55\065\uff55\067\uff55\070\uff55\071\uff55\072\uff55" +
    "\073\uff55\075\uff55\077\uff55\102\uff55\103\uff55\104\uff55\106" +
    "\uff55\001\002\000\046\004\073\017\103\033\066\046\075" +
    "\051\067\052\076\056\063\057\102\062\100\063\065\071" +
    "\071\073\104\075\062\077\055\102\101\103\064\104\046" +
    "\106\072\001\002\000\046\004\uff38\017\uff38\033\uff38\046" +
    "\uff38\051\uff38\052\uff38\056\uff38\057\uff38\062\uff38\063\uff38" +
    "\071\uff38\073\uff38\075\uff38\077\uff38\102\uff38\103\uff38\104" +
    "\uff38\106\uff38\001\002\000\076\004\uff43\005\uff43\006\uff43" +
    "\007\uff43\011\uff43\014\uff43\016\uff43\020\uff43\025\uff43\030" +
    "\uff43\037\uff43\040\uff43\044\uff43\045\uff43\046\uff43\047\uff43" +
    "\050\uff43\051\uff43\052\uff43\053\uff43\054\uff43\060\uff43\061" +
    "\uff43\062\uff43\063\uff43\065\uff43\067\uff43\070\uff43\072\uff43" +
    "\073\uff43\001\002\000\076\004\uff3f\005\uff3f\006\uff3f\007" +
    "\uff3f\011\uff3f\014\uff3f\016\uff3f\020\uff3f\025\uff3f\030\uff3f" +
    "\037\uff3f\040\uff3f\044\uff3f\045\uff3f\046\uff3f\047\uff3f\050" +
    "\uff3f\051\uff3f\052\uff3f\053\uff3f\054\uff3f\060\uff3f\061\uff3f" +
    "\062\uff3f\063\uff3f\065\uff3f\067\uff3f\070\uff3f\072\uff3f\073" +
    "\uff3f\001\002\000\004\106\106\001\002\000\046\004\073" +
    "\017\103\033\066\046\075\051\067\052\076\056\063\057" +
    "\102\062\100\063\065\071\071\073\104\075\062\077\055" +
    "\102\101\103\064\104\046\106\072\001\002\000\062\004" +
    "\uff54\005\uff54\007\uff54\011\uff54\014\uff54\016\uff54\020\uff54" +
    "\030\uff54\037\uff54\040\uff54\044\uff54\047\uff54\050\uff54\051" +
    "\uff54\053\uff54\054\uff54\060\uff54\061\uff54\062\uff54\065\uff54" +
    "\067\uff54\070\uff54\072\uff54\073\uff54\001\002\000\076\004" +
    "\uff3d\005\uff3d\006\uff3d\007\uff3d\011\uff3d\014\uff3d\016\uff3d" +
    "\020\uff3d\025\uff3d\030\uff3d\037\uff3d\040\uff3d\044\uff3d\045" +
    "\uff3d\046\uff3d\047\uff3d\050\uff3d\051\uff3d\052\uff3d\053\uff3d" +
    "\054\uff3d\060\uff3d\061\uff3d\062\uff3d\063\uff3d\065\uff3d\067" +
    "\uff3d\070\uff3d\072\uff3d\073\uff3d\001\002\000\062\004\uff52" +
    "\005\uff52\007\uff52\011\uff52\014\uff52\016\uff52\020\uff52\030" +
    "\uff52\037\uff52\040\uff52\044\uff52\047\uff52\050\uff52\051\uff52" +
    "\053\uff52\054\uff52\060\uff52\061\uff52\062\uff52\065\uff52\067" +
    "\uff52\070\uff52\072\uff52\073\uff52\001\002\000\004\073\116" +
    "\001\002\000\004\067\114\001\002\000\004\067\113\001" +
    "\002\000\076\004\uff45\005\uff45\006\uff45\007\uff45\011\uff45" +
    "\014\uff45\016\uff45\020\uff45\025\uff45\030\uff45\037\uff45\040" +
    "\uff45\044\uff45\045\uff45\046\uff45\047\uff45\050\uff45\051\uff45" +
    "\052\uff45\053\uff45\054\uff45\060\uff45\061\uff45\062\uff45\063" +
    "\uff45\065\uff45\067\uff45\070\uff45\072\uff45\073\uff45\001\002" +
    "\000\046\004\073\017\103\033\066\046\075\051\067\052" +
    "\076\056\063\057\102\062\100\063\065\071\071\073\104" +
    "\075\062\077\055\102\101\103\064\104\046\106\072\001" +
    "\002\000\062\004\uff4e\005\uff4e\007\uff4e\011\uff4e\014\uff4e" +
    "\016\uff4e\020\uff4e\030\uff4e\037\uff4e\040\uff4e\044\uff4e\047" +
    "\uff4e\050\uff4e\051\uff4e\053\uff4e\054\uff4e\060\uff4e\061\uff4e" +
    "\062\uff4e\065\uff4e\067\uff4e\070\uff4e\072\uff4e\073\uff4e\001" +
    "\002\000\014\004\uffb9\045\uffb9\067\uffb9\073\uffb9\106\uffb9" +
    "\001\002\000\014\004\uffc5\045\uffc5\067\uffc5\073\116\106" +
    "\uffc5\001\002\000\014\004\uffbb\045\uffbb\067\uffbb\073\uffbb" +
    "\106\uffbb\001\002\000\014\004\uffba\045\uffba\067\uffba\073" +
    "\uffba\106\uffba\001\002\000\062\004\uff4d\005\uff4d\007\uff4d" +
    "\011\uff4d\014\uff4d\016\uff4d\020\uff4d\030\uff4d\037\uff4d\040" +
    "\uff4d\044\uff4d\047\uff4d\050\uff4d\051\uff4d\053\uff4d\054\uff4d" +
    "\060\uff4d\061\uff4d\062\uff4d\065\uff4d\067\uff4d\070\uff4d\072" +
    "\uff4d\073\uff4d\001\002\000\062\004\uff53\005\uff53\007\uff53" +
    "\011\uff53\014\uff53\016\uff53\020\uff53\030\uff53\037\uff53\040" +
    "\uff53\044\uff53\047\uff53\050\uff53\051\uff53\053\uff53\054\uff53" +
    "\060\uff53\061\uff53\062\uff53\065\uff53\067\uff53\070\uff53\072" +
    "\uff53\073\uff53\001\002\000\056\004\073\012\032\017\103" +
    "\033\066\034\035\042\036\046\075\051\067\052\076\056" +
    "\063\057\102\062\100\063\065\071\071\073\104\075\062" +
    "\077\055\102\101\103\064\104\046\105\031\106\072\001" +
    "\002\000\004\067\141\001\002\000\014\004\uffc7\045\uffc7" +
    "\067\uffc7\073\116\106\uffc7\001\002\000\006\045\132\067" +
    "\uffb7\001\002\000\012\004\uffc8\045\uffc8\067\uffc8\106\uffc8" +
    "\001\002\000\004\067\140\001\002\000\046\004\073\017" +
    "\103\033\066\046\075\051\067\052\076\056\063\057\102" +
    "\062\100\063\065\071\071\073\104\075\062\077\055\102" +
    "\101\103\064\104\046\106\072\001\002\000\016\007\uffb8" +
    "\016\uffb8\020\uffb8\045\132\067\uffb8\070\uffb8\001\002\000" +
    "\016\007\uffb6\016\uffb6\020\uffb6\045\uffb6\067\uffb6\070\uffb6" +
    "\001\002\000\016\007\uffb5\016\uffb5\020\uffb5\045\uffb5\067" +
    "\uffb5\070\uffb5\001\002\000\004\065\137\001\002\000\016" +
    "\007\uffb4\016\uffb4\020\uffb4\045\uffb4\067\uffb4\070\uffb4\001" +
    "\002\000\062\004\uff4f\005\uff4f\007\uff4f\011\uff4f\014\uff4f" +
    "\016\uff4f\020\uff4f\030\uff4f\037\uff4f\040\uff4f\044\uff4f\047" +
    "\uff4f\050\uff4f\051\uff4f\053\uff4f\054\uff4f\060\uff4f\061\uff4f" +
    "\062\uff4f\065\uff4f\067\uff4f\070\uff4f\072\uff4f\073\uff4f\001" +
    "\002\000\062\004\uff50\005\uff50\007\uff50\011\uff50\014\uff50" +
    "\016\uff50\020\uff50\030\uff50\037\uff50\040\uff50\044\uff50\047" +
    "\uff50\050\uff50\051\uff50\053\uff50\054\uff50\060\uff50\061\uff50" +
    "\062\uff50\065\uff50\067\uff50\070\uff50\072\uff50\073\uff50\001" +
    "\002\000\062\004\uff51\005\uff51\007\uff51\011\uff51\014\uff51" +
    "\016\uff51\020\uff51\030\uff51\037\uff51\040\uff51\044\uff51\047" +
    "\uff51\050\uff51\051\uff51\053\uff51\054\uff51\060\uff51\061\uff51" +
    "\062\uff51\065\uff51\067\uff51\070\uff51\072\uff51\073\uff51\001" +
    "\002\000\004\060\144\001\002\000\046\004\073\017\103" +
    "\033\066\046\075\051\067\052\076\056\063\057\102\062" +
    "\100\063\065\071\071\073\104\075\062\077\055\102\101" +
    "\103\064\104\046\106\072\001\002\000\056\004\uff62\005" +
    "\uff62\011\uff62\014\uff62\020\uff62\030\uff62\037\uff62\040\uff62" +
    "\044\uff62\047\uff62\050\uff62\051\uff62\053\uff62\054\uff62\060" +
    "\uff62\061\uff62\062\uff62\065\uff62\067\uff62\070\uff62\072\uff62" +
    "\073\uff62\001\002\000\022\005\uff72\020\uff74\044\uff74\060" +
    "\uff74\061\uff74\065\uff74\067\uff74\070\uff74\001\002\000\004" +
    "\005\150\001\002\000\046\004\073\017\103\033\066\046" +
    "\075\051\067\052\076\056\063\057\102\062\100\063\065" +
    "\071\071\073\104\075\062\077\055\102\101\103\064\104" +
    "\046\106\072\001\002\000\024\005\uff71\011\152\020\uff71" +
    "\044\uff71\060\uff71\061\uff71\065\uff71\067\uff71\070\uff71\001" +
    "\002\000\046\004\073\017\103\033\066\046\075\051\067" +
    "\052\076\056\063\057\102\062\100\063\065\071\071\073" +
    "\104\075\062\077\055\102\101\103\064\104\046\106\072" +
    "\001\002\000\026\005\uff6f\011\uff6f\014\154\020\uff6f\044" +
    "\uff6f\060\uff6f\061\uff6f\065\uff6f\067\uff6f\070\uff6f\001\002" +
    "\000\046\004\073\017\103\033\066\046\075\051\067\052" +
    "\076\056\063\057\102\062\100\063\065\071\071\073\104" +
    "\075\062\077\055\102\101\103\064\104\046\106\072\001" +
    "\002\000\030\004\156\005\uff6d\011\uff6d\014\uff6d\020\uff6d" +
    "\044\uff6d\060\uff6d\061\uff6d\065\uff6d\067\uff6d\070\uff6d\001" +
    "\002\000\046\004\073\017\103\033\066\046\075\051\067" +
    "\052\076\056\063\057\102\062\100\063\065\071\071\073" +
    "\104\075\062\077\055\102\101\103\064\104\046\106\072" +
    "\001\002\000\034\004\uff6b\005\uff6b\011\uff6b\014\uff6b\020" +
    "\uff6b\030\162\044\uff6b\054\161\060\uff6b\061\uff6b\065\uff6b" +
    "\067\uff6b\070\uff6b\001\002\000\046\004\073\017\103\033" +
    "\066\046\075\051\067\052\076\056\063\057\102\062\100" +
    "\063\065\071\071\073\104\075\062\077\055\102\101\103" +
    "\064\104\046\106\072\001\002\000\046\004\uff60\017\uff60" +
    "\033\uff60\046\uff60\051\uff60\052\uff60\056\uff60\057\uff60\062" +
    "\uff60\063\uff60\071\uff60\073\uff60\075\uff60\077\uff60\102\uff60" +
    "\103\uff60\104\uff60\106\uff60\001\002\000\046\004\uff61\017" +
    "\uff61\033\uff61\046\uff61\051\uff61\052\uff61\056\uff61\057\uff61" +
    "\062\uff61\063\uff61\071\uff61\073\uff61\075\uff61\077\uff61\102" +
    "\uff61\103\uff61\104\uff61\106\uff61\001\002\000\044\004\uff69" +
    "\005\uff69\011\uff69\014\uff69\020\uff69\030\uff69\037\170\040" +
    "\164\044\uff69\047\167\050\165\054\uff69\060\uff69\061\uff69" +
    "\065\uff69\067\uff69\070\uff69\001\002\000\046\004\uff5c\017" +
    "\uff5c\033\uff5c\046\uff5c\051\uff5c\052\uff5c\056\uff5c\057\uff5c" +
    "\062\uff5c\063\uff5c\071\uff5c\073\uff5c\075\uff5c\077\uff5c\102" +
    "\uff5c\103\uff5c\104\uff5c\106\uff5c\001\002\000\046\004\uff5d" +
    "\017\uff5d\033\uff5d\046\uff5d\051\uff5d\052\uff5d\056\uff5d\057" +
    "\uff5d\062\uff5d\063\uff5d\071\uff5d\073\uff5d\075\uff5d\077\uff5d" +
    "\102\uff5d\103\uff5d\104\uff5d\106\uff5d\001\002\000\046\004" +
    "\073\017\103\033\066\046\075\051\067\052\076\056\063" +
    "\057\102\062\100\063\065\071\071\073\104\075\062\077" +
    "\055\102\101\103\064\104\046\106\072\001\002\000\046" +
    "\004\uff5f\017\uff5f\033\uff5f\046\uff5f\051\uff5f\052\uff5f\056" +
    "\uff5f\057\uff5f\062\uff5f\063\uff5f\071\uff5f\073\uff5f\075\uff5f" +
    "\077\uff5f\102\uff5f\103\uff5f\104\uff5f\106\uff5f\001\002\000" +
    "\046\004\uff5e\017\uff5e\033\uff5e\046\uff5e\051\uff5e\052\uff5e" +
    "\056\uff5e\057\uff5e\062\uff5e\063\uff5e\071\uff5e\073\uff5e\075" +
    "\uff5e\077\uff5e\102\uff5e\103\uff5e\104\uff5e\106\uff5e\001\002" +
    "\000\050\004\uff67\005\uff67\011\uff67\014\uff67\020\uff67\030" +
    "\uff67\037\uff67\040\uff67\044\uff67\047\uff67\050\uff67\051\173" +
    "\054\uff67\060\uff67\061\uff67\062\172\065\uff67\067\uff67\070" +
    "\uff67\001\002\000\046\004\uff5b\017\uff5b\033\uff5b\046\uff5b" +
    "\051\uff5b\052\uff5b\056\uff5b\057\uff5b\062\uff5b\063\uff5b\071" +
    "\uff5b\073\uff5b\075\uff5b\077\uff5b\102\uff5b\103\uff5b\104\uff5b" +
    "\106\uff5b\001\002\000\046\004\uff5a\017\uff5a\033\uff5a\046" +
    "\uff5a\051\uff5a\052\uff5a\056\uff5a\057\uff5a\062\uff5a\063\uff5a" +
    "\071\uff5a\073\uff5a\075\uff5a\077\uff5a\102\uff5a\103\uff5a\104" +
    "\uff5a\106\uff5a\001\002\000\046\004\073\017\103\033\066" +
    "\046\075\051\067\052\076\056\063\057\102\062\100\063" +
    "\065\071\071\073\104\075\062\077\055\102\101\103\064" +
    "\104\046\106\072\001\002\000\056\004\uff65\005\uff65\011" +
    "\uff65\014\uff65\020\uff65\030\uff65\037\uff65\040\uff65\044\uff65" +
    "\047\uff65\050\uff65\051\uff65\053\176\054\uff65\060\uff65\061" +
    "\uff65\062\uff65\065\uff65\067\uff65\070\uff65\072\200\073\177" +
    "\001\002\000\046\004\uff57\017\uff57\033\uff57\046\uff57\051" +
    "\uff57\052\uff57\056\uff57\057\uff57\062\uff57\063\uff57\071\uff57" +
    "\073\uff57\075\uff57\077\uff57\102\uff57\103\uff57\104\uff57\106" +
    "\uff57\001\002\000\046\004\uff59\017\uff59\033\uff59\046\uff59" +
    "\051\uff59\052\uff59\056\uff59\057\uff59\062\uff59\063\uff59\071" +
    "\uff59\073\uff59\075\uff59\077\uff59\102\uff59\103\uff59\104\uff59" +
    "\106\uff59\001\002\000\046\004\uff58\017\uff58\033\uff58\046" +
    "\uff58\051\uff58\052\uff58\056\uff58\057\uff58\062\uff58\063\uff58" +
    "\071\uff58\073\uff58\075\uff58\077\uff58\102\uff58\103\uff58\104" +
    "\uff58\106\uff58\001\002\000\046\004\073\017\103\033\066" +
    "\046\075\051\067\052\076\056\063\057\102\062\100\063" +
    "\065\071\071\073\104\075\062\077\055\102\101\103\064" +
    "\104\046\106\072\001\002\000\056\004\uff63\005\uff63\011" +
    "\uff63\014\uff63\020\uff63\030\uff63\037\uff63\040\uff63\044\uff63" +
    "\047\uff63\050\uff63\051\uff63\053\uff63\054\uff63\060\uff63\061" +
    "\uff63\062\uff63\065\uff63\067\uff63\070\uff63\072\uff63\073\uff63" +
    "\001\002\000\004\070\204\001\002\000\126\002\uffe9\004" +
    "\uffe9\010\uffe9\012\uffe9\013\uffe9\015\uffe9\017\uffe9\021\uffe9" +
    "\022\uffe9\023\uffe9\024\uffe9\031\uffe9\032\uffe9\033\uffe9\034" +
    "\uffe9\035\uffe9\036\uffe9\041\uffe9\042\uffe9\044\uffe9\046\uffe9" +
    "\051\uffe9\052\uffe9\055\uffe9\056\uffe9\057\uffe9\062\uffe9\063" +
    "\uffe9\064\uffe9\066\uffe9\071\uffe9\073\uffe9\074\uffe9\075\uffe9" +
    "\077\uffe9\100\uffe9\102\uffe9\103\uffe9\104\uffe9\105\uffe9\106" +
    "\uffe9\107\uffe9\001\002\000\046\004\073\017\103\033\066" +
    "\046\075\051\067\052\076\056\063\057\102\062\100\063" +
    "\065\071\071\073\104\075\062\077\055\102\101\103\064" +
    "\104\046\106\072\001\002\000\050\004\073\017\103\033" +
    "\066\046\075\051\067\052\076\056\063\057\102\062\100" +
    "\063\065\067\uff7a\071\071\073\104\075\062\077\055\102" +
    "\101\103\064\104\046\106\072\001\002\000\076\004\uff48" +
    "\005\uff48\006\uff48\007\uff48\011\uff48\014\uff48\016\uff48\020" +
    "\uff48\025\uff48\030\uff48\037\uff48\040\uff48\044\uff48\045\uff48" +
    "\046\uff48\047\uff48\050\uff48\051\uff48\052\uff48\053\uff48\054" +
    "\uff48\060\uff48\061\uff48\062\uff48\063\uff48\065\uff48\067\uff48" +
    "\070\uff48\072\uff48\073\uff48\001\002\000\004\106\213\001" +
    "\002\000\004\106\212\001\002\000\076\004\uff4b\005\uff4b" +
    "\006\uff4b\007\uff4b\011\uff4b\014\uff4b\016\uff4b\020\uff4b\025" +
    "\uff4b\030\uff4b\037\uff4b\040\uff4b\044\uff4b\045\uff4b\046\uff4b" +
    "\047\uff4b\050\uff4b\051\uff4b\052\uff4b\053\uff4b\054\uff4b\060" +
    "\uff4b\061\uff4b\062\uff4b\063\uff4b\065\uff4b\067\uff4b\070\uff4b" +
    "\072\uff4b\073\uff4b\001\002\000\076\004\uff49\005\uff49\006" +
    "\uff49\007\uff49\011\uff49\014\uff49\016\uff49\020\uff49\025\uff49" +
    "\030\uff49\037\uff49\040\uff49\044\uff49\045\uff49\046\uff49\047" +
    "\uff49\050\uff49\051\uff49\052\uff49\053\uff49\054\uff49\060\uff49" +
    "\061\uff49\062\uff49\063\uff49\065\uff49\067\uff49\070\uff49\072" +
    "\uff49\073\uff49\001\002\000\006\020\220\067\uff7b\001\002" +
    "\000\006\020\uff79\067\uff79\001\002\000\004\067\217\001" +
    "\002\000\076\004\uff47\005\uff47\006\uff47\007\uff47\011\uff47" +
    "\014\uff47\016\uff47\020\uff47\025\uff47\030\uff47\037\uff47\040" +
    "\uff47\044\uff47\045\uff47\046\uff47\047\uff47\050\uff47\051\uff47" +
    "\052\uff47\053\uff47\054\uff47\060\uff47\061\uff47\062\uff47\063" +
    "\uff47\065\uff47\067\uff47\070\uff47\072\uff47\073\uff47\001\002" +
    "\000\046\004\073\017\103\033\066\046\075\051\067\052" +
    "\076\056\063\057\102\062\100\063\065\071\071\073\104" +
    "\075\062\077\055\102\101\103\064\104\046\106\072\001" +
    "\002\000\006\020\uff78\067\uff78\001\002\000\004\065\223" +
    "\001\002\000\076\004\uff4a\005\uff4a\006\uff4a\007\uff4a\011" +
    "\uff4a\014\uff4a\016\uff4a\020\uff4a\025\uff4a\030\uff4a\037\uff4a" +
    "\040\uff4a\044\uff4a\045\uff4a\046\uff4a\047\uff4a\050\uff4a\051" +
    "\uff4a\052\uff4a\053\uff4a\054\uff4a\060\uff4a\061\uff4a\062\uff4a" +
    "\063\uff4a\065\uff4a\067\uff4a\070\uff4a\072\uff4a\073\uff4a\001" +
    "\002\000\046\004\073\017\103\033\066\046\075\051\067" +
    "\052\076\056\063\057\102\062\100\063\065\071\071\073" +
    "\104\075\062\077\055\102\101\103\064\104\046\106\072" +
    "\001\002\000\016\020\uff77\044\uff77\061\uff77\065\uff77\067" +
    "\uff77\070\uff77\001\002\000\004\007\227\001\002\000\046" +
    "\004\073\017\103\033\066\046\075\051\067\052\076\056" +
    "\063\057\102\062\100\063\065\071\071\073\104\075\062" +
    "\077\055\102\101\103\064\104\046\106\072\001\002\000" +
    "\004\070\uffec\001\002\000\004\070\232\001\002\000\126" +
    "\002\uffeb\004\uffeb\010\uffeb\012\uffeb\013\uffeb\015\uffeb\017" +
    "\uffeb\021\uffeb\022\uffeb\023\uffeb\024\uffeb\031\uffeb\032\uffeb" +
    "\033\uffeb\034\uffeb\035\uffeb\036\uffeb\041\uffeb\042\uffeb\044" +
    "\uffeb\046\uffeb\051\uffeb\052\uffeb\055\uffeb\056\uffeb\057\uffeb" +
    "\062\uffeb\063\uffeb\064\uffeb\066\uffeb\071\uffeb\073\uffeb\074" +
    "\uffeb\075\uffeb\077\uffeb\100\uffeb\102\uffeb\103\uffeb\104\uffeb" +
    "\105\uffeb\106\uffeb\107\uffeb\001\002\000\010\016\uffb7\045" +
    "\132\070\uffb7\001\002\000\006\016\235\070\uff93\001\002" +
    "\000\004\046\242\001\002\000\004\070\uffee\001\002\000" +
    "\004\070\uff94\001\002\000\004\070\241\001\002\000\126" +
    "\002\uffed\004\uffed\010\uffed\012\uffed\013\uffed\015\uffed\017" +
    "\uffed\021\uffed\022\uffed\023\uffed\024\uffed\031\uffed\032\uffed" +
    "\033\uffed\034\uffed\035\uffed\036\uffed\041\uffed\042\uffed\044" +
    "\uffed\046\uffed\051\uffed\052\uffed\055\uffed\056\uffed\057\uffed" +
    "\062\uffed\063\uffed\064\uffed\066\uffed\071\uffed\073\uffed\074" +
    "\uffed\075\uffed\077\uffed\100\uffed\102\uffed\103\uffed\104\uffed" +
    "\105\uffed\106\uffed\107\uffed\001\002\000\050\004\073\017" +
    "\103\033\066\046\075\051\067\052\076\056\063\057\102" +
    "\062\100\063\065\067\uff7a\071\071\073\104\075\062\077" +
    "\055\102\101\103\064\104\046\106\072\001\002\000\004" +
    "\067\244\001\002\000\004\070\uff92\001\002\000\004\007" +
    "\246\001\002\000\046\004\073\017\103\033\066\046\075" +
    "\051\067\052\076\056\063\057\102\062\100\063\065\071" +
    "\071\073\104\075\062\077\055\102\101\103\064\104\046" +
    "\106\072\001\002\000\004\070\ufff0\001\002\000\004\070" +
    "\251\001\002\000\126\002\uffef\004\uffef\010\uffef\012\uffef" +
    "\013\uffef\015\uffef\017\uffef\021\uffef\022\uffef\023\uffef\024" +
    "\uffef\031\uffef\032\uffef\033\uffef\034\uffef\035\uffef\036\uffef" +
    "\041\uffef\042\uffef\044\uffef\046\uffef\051\uffef\052\uffef\055" +
    "\uffef\056\uffef\057\uffef\062\uffef\063\uffef\064\uffef\066\uffef" +
    "\071\uffef\073\uffef\074\uffef\075\uffef\077\uffef\100\uffef\102" +
    "\uffef\103\uffef\104\uffef\105\uffef\106\uffef\107\uffef\001\002" +
    "\000\010\007\uffb7\045\132\070\uffb7\001\002\000\006\007" +
    "\255\070\uff95\001\002\000\004\070\ufff2\001\002\000\046" +
    "\004\073\017\103\033\066\046\075\051\067\052\076\056" +
    "\063\057\102\062\100\063\065\071\071\073\104\075\062" +
    "\077\055\102\101\103\064\104\046\106\072\001\002\000" +
    "\004\070\uff96\001\002\000\004\070\260\001\002\000\126" +
    "\002\ufff1\004\ufff1\010\ufff1\012\ufff1\013\ufff1\015\ufff1\017" +
    "\ufff1\021\ufff1\022\ufff1\023\ufff1\024\ufff1\031\ufff1\032\ufff1" +
    "\033\ufff1\034\ufff1\035\ufff1\036\ufff1\041\ufff1\042\ufff1\044" +
    "\ufff1\046\ufff1\051\ufff1\052\ufff1\055\ufff1\056\ufff1\057\ufff1" +
    "\062\ufff1\063\ufff1\064\ufff1\066\ufff1\071\ufff1\073\ufff1\074" +
    "\ufff1\075\ufff1\077\ufff1\100\ufff1\102\ufff1\103\ufff1\104\ufff1" +
    "\105\ufff1\106\ufff1\107\ufff1\001\002\000\012\004\uffc4\045" +
    "\uffc4\067\uffc4\106\uffc4\001\002\000\014\004\uffbd\045\uffbd" +
    "\067\uffbd\073\116\106\uffbd\001\002\000\004\044\264\001" +
    "\002\000\012\012\uffe6\034\uffe6\042\uffe6\105\uffe6\001\002" +
    "\000\012\012\032\034\035\042\036\105\031\001\002\000" +
    "\020\012\032\034\035\036\uffde\042\036\064\uffde\076\275" +
    "\105\277\001\002\000\004\106\271\001\002\000\020\012" +
    "\uffe2\034\uffe2\036\uffe2\042\uffe2\064\uffe2\076\uffe2\105\uffe2" +
    "\001\002\000\006\045\132\070\uffb7\001\002\000\004\070" +
    "\273\001\002\000\020\012\uffe0\034\uffe0\036\uffe0\042\uffe0" +
    "\064\uffe0\076\uffe0\105\uffe0\001\002\000\012\036\uffda\064" +
    "\uffda\076\uffda\105\uffda\001\002\000\004\105\u0130\001\002" +
    "\000\020\012\uffe1\034\uffe1\036\uffe1\042\uffe1\064\uffe1\076" +
    "\uffe1\105\uffe1\001\002\000\006\046\uffd9\073\uffc0\001\002" +
    "\000\012\036\uffdf\064\uffdf\076\275\105\315\001\002\000" +
    "\012\036\uffdd\064\uffdd\076\uffdd\105\uffdd\001\002\000\012" +
    "\036\uffdb\064\uffdb\076\uffdb\105\uffdb\001\002\000\006\036" +
    "\uffe5\064\uffe5\001\002\000\006\036\011\064\uffd3\001\002" +
    "\000\006\036\uffd2\064\uffd2\001\002\000\006\036\011\064" +
    "\uffd4\001\002\000\006\036\uffd0\064\uffd0\001\002\000\004" +
    "\064\uffe4\001\002\000\004\064\312\001\002\000\004\070" +
    "\313\001\002\000\030\002\uffe3\010\uffe3\012\uffe3\021\uffe3" +
    "\032\uffe3\034\uffe3\036\uffe3\042\uffe3\074\uffe3\105\uffe3\107" +
    "\uffe3\001\002\000\006\036\uffd1\064\uffd1\001\002\000\004" +
    "\046\uffd9\001\002\000\012\036\uffdc\064\uffdc\076\uffdc\105" +
    "\uffdc\001\002\000\004\046\320\001\002\000\014\012\032" +
    "\034\035\042\036\067\uff9c\105\031\001\002\000\006\004" +
    "\377\106\uff97\001\002\000\006\020\u012b\067\uff9d\001\002" +
    "\000\006\020\uff9b\067\uff9b\001\002\000\004\067\325\001" +
    "\002\000\004\044\uffd8\001\002\000\004\044\327\001\002" +
    "\000\116\004\073\010\uffe7\012\uffe7\013\357\015\347\017" +
    "\103\021\uffe7\022\335\023\334\024\333\031\353\033\066" +
    "\034\uffe7\035\361\041\363\042\uffe7\044\342\046\075\051" +
    "\067\052\076\055\343\056\063\057\102\062\100\063\065" +
    "\064\uffaf\066\337\071\071\073\104\075\062\077\055\100" +
    "\332\102\101\103\064\104\046\105\uffe7\106\072\107\015" +
    "\001\002\000\116\004\uffa2\010\uffa2\012\uffa2\013\uffa2\015" +
    "\uffa2\017\uffa2\021\uffa2\022\uffa2\023\uffa2\024\uffa2\031\uffa2" +
    "\033\uffa2\034\uffa2\035\uffa2\041\uffa2\042\uffa2\044\uffa2\046" +
    "\uffa2\051\uffa2\052\uffa2\055\uffa2\056\uffa2\057\uffa2\062\uffa2" +
    "\063\uffa2\064\uffa2\066\uffa2\071\uffa2\073\uffa2\075\uffa2\077" +
    "\uffa2\100\uffa2\102\uffa2\103\uffa2\104\uffa2\105\uffa2\106\uffa2" +
    "\107\uffa2\001\002\000\116\004\uffa3\010\uffa3\012\uffa3\013" +
    "\uffa3\015\uffa3\017\uffa3\021\uffa3\022\uffa3\023\uffa3\024\uffa3" +
    "\031\uffa3\033\uffa3\034\uffa3\035\uffa3\041\uffa3\042\uffa3\044" +
    "\uffa3\046\uffa3\051\uffa3\052\uffa3\055\uffa3\056\uffa3\057\uffa3" +
    "\062\uffa3\063\uffa3\064\uffa3\066\uffa3\071\uffa3\073\uffa3\075" +
    "\uffa3\077\uffa3\100\uffa3\102\uffa3\103\uffa3\104\uffa3\105\uffa3" +
    "\106\uffa3\107\uffa3\001\002\000\046\004\uff8c\017\uff8c\033" +
    "\uff8c\046\uff8c\051\uff8c\052\uff8c\056\uff8c\057\uff8c\062\uff8c" +
    "\063\uff8c\071\uff8c\073\uff8c\075\uff8c\077\uff8c\102\uff8c\103" +
    "\uff8c\104\uff8c\106\uff8c\001\002\000\046\004\073\017\103" +
    "\033\066\046\075\051\067\052\076\056\063\057\102\062" +
    "\100\063\065\071\071\073\104\075\062\077\055\102\101" +
    "\103\064\104\046\106\072\001\002\000\004\061\u011d\001" +
    "\002\000\004\070\u011c\001\002\000\116\004\uffa1\010\uffa1" +
    "\012\uffa1\013\uffa1\015\uffa1\017\uffa1\021\uffa1\022\uffa1\023" +
    "\uffa1\024\uffa1\031\uffa1\033\uffa1\034\uffa1\035\uffa1\041\uffa1" +
    "\042\uffa1\044\uffa1\046\uffa1\051\uffa1\052\uffa1\055\uffa1\056" +
    "\uffa1\057\uffa1\062\uffa1\063\uffa1\064\uffa1\066\uffa1\071\uffa1" +
    "\073\uffa1\075\uffa1\077\uffa1\100\uffa1\102\uffa1\103\uffa1\104" +
    "\uffa1\105\uffa1\106\uffa1\107\uffa1\001\002\000\050\004\073" +
    "\017\103\033\066\046\075\051\067\052\076\056\063\057" +
    "\102\062\100\063\065\070\u011a\071\071\073\104\075\062" +
    "\077\055\102\101\103\064\104\046\106\072\001\002\000" +
    "\116\004\uffa0\010\uffa0\012\uffa0\013\uffa0\015\uffa0\017\uffa0" +
    "\021\uffa0\022\uffa0\023\uffa0\024\uffa0\031\uffa0\033\uffa0\034" +
    "\uffa0\035\uffa0\041\uffa0\042\uffa0\044\uffa0\046\uffa0\051\uffa0" +
    "\052\uffa0\055\uffa0\056\uffa0\057\uffa0\062\uffa0\063\uffa0\064" +
    "\uffa0\066\uffa0\071\uffa0\073\uffa0\075\uffa0\077\uffa0\100\uffa0" +
    "\102\uffa0\103\uffa0\104\uffa0\105\uffa0\106\uffa0\107\uffa0\001" +
    "\002\000\116\004\uffa7\010\uffa7\012\uffa7\013\uffa7\015\uffa7" +
    "\017\uffa7\021\uffa7\022\uffa7\023\uffa7\024\uffa7\031\uffa7\033" +
    "\uffa7\034\uffa7\035\uffa7\041\uffa7\042\uffa7\044\uffa7\046\uffa7" +
    "\051\uffa7\052\uffa7\055\uffa7\056\uffa7\057\uffa7\062\uffa7\063" +
    "\uffa7\064\uffa7\066\uffa7\071\uffa7\073\uffa7\075\uffa7\077\uffa7" +
    "\100\uffa7\102\uffa7\103\uffa7\104\uffa7\105\uffa7\106\uffa7\107" +
    "\uffa7\001\002\000\116\004\uffb3\010\uffb3\012\uffb3\013\uffb3" +
    "\015\uffb3\017\uffb3\021\uffb3\022\uffb3\023\uffb3\024\uffb3\031" +
    "\uffb3\033\uffb3\034\uffb3\035\uffb3\041\uffb3\042\uffb3\044\uffb3" +
    "\046\uffb3\051\uffb3\052\uffb3\055\uffb3\056\uffb3\057\uffb3\062" +
    "\uffb3\063\uffb3\064\uffb3\066\uffb3\071\uffb3\073\uffb3\075\uffb3" +
    "\077\uffb3\100\uffb3\102\uffb3\103\uffb3\104\uffb3\105\uffb3\106" +
    "\uffb3\107\uffb3\001\002\000\046\004\073\017\103\033\066" +
    "\046\075\051\067\052\076\056\063\057\102\062\100\063" +
    "\065\071\071\073\104\075\062\077\055\102\101\103\064" +
    "\104\046\106\072\001\002\000\116\004\073\010\uffe7\012" +
    "\uffe7\013\357\015\347\017\103\021\uffe7\022\335\023\334" +
    "\024\333\031\353\033\066\034\uffe7\035\361\041\363\042" +
    "\uffe7\044\342\046\075\051\067\052\076\055\343\056\063" +
    "\057\102\062\100\063\065\064\uffb0\066\337\071\071\073" +
    "\104\075\062\077\055\100\332\102\101\103\064\104\046" +
    "\105\uffe7\106\072\107\015\001\002\000\116\004\uff9f\010" +
    "\uff9f\012\uff9f\013\uff9f\015\uff9f\017\uff9f\021\uff9f\022\uff9f" +
    "\023\uff9f\024\uff9f\031\uff9f\033\uff9f\034\uff9f\035\uff9f\041" +
    "\uff9f\042\uff9f\044\uff9f\046\uff9f\051\uff9f\052\uff9f\055\uff9f" +
    "\056\uff9f\057\uff9f\062\uff9f\063\uff9f\064\uff9f\066\uff9f\071" +
    "\uff9f\073\uff9f\075\uff9f\077\uff9f\100\uff9f\102\uff9f\103\uff9f" +
    "\104\uff9f\105\uff9f\106\uff9f\107\uff9f\001\002\000\116\004" +
    "\uffaa\010\uffaa\012\uffaa\013\uffaa\015\uffaa\017\uffaa\021\uffaa" +
    "\022\uffaa\023\uffaa\024\uffaa\031\uffaa\033\uffaa\034\uffaa\035" +
    "\uffaa\041\uffaa\042\uffaa\044\uffaa\046\uffaa\051\uffaa\052\uffaa" +
    "\055\uffaa\056\uffaa\057\uffaa\062\uffaa\063\uffaa\064\uffaa\066" +
    "\uffaa\071\uffaa\073\uffaa\075\uffaa\077\uffaa\100\uffaa\102\uffaa" +
    "\103\uffaa\104\uffaa\105\uffaa\106\uffaa\107\uffaa\001\002\000" +
    "\004\043\u010e\001\002\000\116\004\uffa8\010\uffa8\012\uffa8" +
    "\013\uffa8\015\uffa8\017\uffa8\021\uffa8\022\uffa8\023\uffa8\024" +
    "\uffa8\031\uffa8\033\uffa8\034\uffa8\035\uffa8\041\uffa8\042\uffa8" +
    "\044\uffa8\046\uffa8\051\uffa8\052\uffa8\055\uffa8\056\uffa8\057" +
    "\uffa8\062\uffa8\063\uffa8\064\uffa8\066\uffa8\071\uffa8\073\uffa8" +
    "\075\uffa8\077\uffa8\100\uffa8\102\uffa8\103\uffa8\104\uffa8\105" +
    "\uffa8\106\uffa8\107\uffa8\001\002\000\004\070\u010d\001\002" +
    "\000\004\064\u010c\001\002\000\004\046\u0108\001\002\000" +
    "\116\004\uffa6\010\uffa6\012\uffa6\013\uffa6\015\uffa6\017\uffa6" +
    "\021\uffa6\022\uffa6\023\uffa6\024\uffa6\031\uffa6\033\uffa6\034" +
    "\uffa6\035\uffa6\041\uffa6\042\uffa6\044\uffa6\046\uffa6\051\uffa6" +
    "\052\uffa6\055\uffa6\056\uffa6\057\uffa6\062\uffa6\063\uffa6\064" +
    "\uffa6\066\uffa6\071\uffa6\073\uffa6\075\uffa6\077\uffa6\100\uffa6" +
    "\102\uffa6\103\uffa6\104\uffa6\105\uffa6\106\uffa6\107\uffa6\001" +
    "\002\000\116\004\uffac\010\uffac\012\uffac\013\uffac\015\uffac" +
    "\017\uffac\021\uffac\022\uffac\023\uffac\024\uffac\031\uffac\033" +
    "\uffac\034\uffac\035\uffac\041\uffac\042\uffac\044\uffac\046\uffac" +
    "\051\uffac\052\uffac\055\uffac\056\uffac\057\uffac\062\uffac\063" +
    "\uffac\064\uffac\066\uffac\071\uffac\073\uffac\075\uffac\077\uffac" +
    "\100\uffac\102\uffac\103\uffac\104\uffac\105\uffac\106\uffac\107" +
    "\uffac\001\002\000\116\004\uffae\010\uffae\012\uffae\013\uffae" +
    "\015\uffae\017\uffae\021\uffae\022\uffae\023\uffae\024\uffae\031" +
    "\uffae\033\uffae\034\uffae\035\uffae\041\uffae\042\uffae\044\uffae" +
    "\046\uffae\051\uffae\052\uffae\055\uffae\056\uffae\057\uffae\062" +
    "\uffae\063\uffae\064\uffae\066\uffae\071\uffae\073\uffae\075\uffae" +
    "\077\uffae\100\uffae\102\uffae\103\uffae\104\uffae\105\uffae\106" +
    "\uffae\107\uffae\001\002\000\004\070\u0107\001\002\000\116" +
    "\004\uffab\010\uffab\012\uffab\013\uffab\015\uffab\017\uffab\021" +
    "\uffab\022\uffab\023\uffab\024\uffab\031\uffab\033\uffab\034\uffab" +
    "\035\uffab\041\uffab\042\uffab\044\uffab\046\uffab\051\uffab\052" +
    "\uffab\055\uffab\056\uffab\057\uffab\062\uffab\063\uffab\064\uffab" +
    "\066\uffab\071\uffab\073\uffab\075\uffab\077\uffab\100\uffab\102" +
    "\uffab\103\uffab\104\uffab\105\uffab\106\uffab\107\uffab\001\002" +
    "\000\004\046\375\001\002\000\116\004\uffa4\010\uffa4\012" +
    "\uffa4\013\uffa4\015\uffa4\017\uffa4\021\uffa4\022\uffa4\023\uffa4" +
    "\024\uffa4\031\uffa4\033\uffa4\034\uffa4\035\uffa4\041\uffa4\042" +
    "\uffa4\044\uffa4\046\uffa4\051\uffa4\052\uffa4\055\uffa4\056\uffa4" +
    "\057\uffa4\062\uffa4\063\uffa4\064\uffa4\066\uffa4\071\uffa4\073" +
    "\uffa4\075\uffa4\077\uffa4\100\uffa4\102\uffa4\103\uffa4\104\uffa4" +
    "\105\uffa4\106\uffa4\107\uffa4\001\002\000\046\004\073\017" +
    "\103\033\066\046\075\051\067\052\076\056\063\057\102" +
    "\062\100\063\065\071\071\073\104\075\062\077\055\102" +
    "\101\103\064\104\046\106\072\001\002\000\116\004\uff9e" +
    "\010\uff9e\012\uff9e\013\uff9e\015\uff9e\017\uff9e\021\uff9e\022" +
    "\uff9e\023\uff9e\024\uff9e\031\uff9e\033\uff9e\034\uff9e\035\uff9e" +
    "\041\uff9e\042\uff9e\044\uff9e\046\uff9e\051\uff9e\052\uff9e\055" +
    "\uff9e\056\uff9e\057\uff9e\062\uff9e\063\uff9e\064\uff9e\066\uff9e" +
    "\071\uff9e\073\uff9e\075\uff9e\077\uff9e\100\uff9e\102\uff9e\103" +
    "\uff9e\104\uff9e\105\uff9e\106\uff9e\107\uff9e\001\002\000\116" +
    "\004\uffa5\010\uffa5\012\uffa5\013\uffa5\015\uffa5\017\uffa5\021" +
    "\uffa5\022\uffa5\023\uffa5\024\uffa5\031\uffa5\033\uffa5\034\uffa5" +
    "\035\uffa5\041\uffa5\042\uffa5\044\uffa5\046\uffa5\051\uffa5\052" +
    "\uffa5\055\uffa5\056\uffa5\057\uffa5\062\uffa5\063\uffa5\064\uffa5" +
    "\066\uffa5\071\uffa5\073\uffa5\075\uffa5\077\uffa5\100\uffa5\102" +
    "\uffa5\103\uffa5\104\uffa5\105\uffa5\106\uffa5\107\uffa5\001\002" +
    "\000\004\044\uff91\001\002\000\004\044\342\001\002\000" +
    "\120\004\uff90\010\uff90\012\uff90\013\uff90\015\uff90\017\uff90" +
    "\021\uff90\022\uff90\023\uff90\024\uff90\026\uff90\031\uff90\033" +
    "\uff90\034\uff90\035\uff90\041\uff90\042\uff90\044\uff90\046\uff90" +
    "\051\uff90\052\uff90\055\uff90\056\uff90\057\uff90\062\uff90\063" +
    "\uff90\064\uff90\066\uff90\071\uff90\073\uff90\075\uff90\077\uff90" +
    "\100\uff90\102\uff90\103\uff90\104\uff90\105\uff90\106\uff90\107" +
    "\uff90\001\002\000\120\004\uff8d\010\uff8d\012\uff8d\013\uff8d" +
    "\015\uff8d\017\uff8d\021\uff8d\022\uff8d\023\uff8d\024\uff8d\026" +
    "\373\031\uff8d\033\uff8d\034\uff8d\035\uff8d\041\uff8d\042\uff8d" +
    "\044\uff8d\046\uff8d\051\uff8d\052\uff8d\055\uff8d\056\uff8d\057" +
    "\uff8d\062\uff8d\063\uff8d\064\uff8d\066\uff8d\071\uff8d\073\uff8d" +
    "\075\uff8d\077\uff8d\100\uff8d\102\uff8d\103\uff8d\104\uff8d\105" +
    "\uff8d\106\uff8d\107\uff8d\001\002\000\116\004\uff8f\010\uff8f" +
    "\012\uff8f\013\uff8f\015\uff8f\017\uff8f\021\uff8f\022\uff8f\023" +
    "\uff8f\024\uff8f\031\uff8f\033\uff8f\034\uff8f\035\uff8f\041\uff8f" +
    "\042\uff8f\044\uff8f\046\uff8f\051\uff8f\052\uff8f\055\uff8f\056" +
    "\uff8f\057\uff8f\062\uff8f\063\uff8f\064\uff8f\066\uff8f\071\uff8f" +
    "\073\uff8f\075\uff8f\077\uff8f\100\uff8f\102\uff8f\103\uff8f\104" +
    "\uff8f\105\uff8f\106\uff8f\107\uff8f\001\002\000\004\044\342" +
    "\001\002\000\116\004\uff8e\010\uff8e\012\uff8e\013\uff8e\015" +
    "\uff8e\017\uff8e\021\uff8e\022\uff8e\023\uff8e\024\uff8e\031\uff8e" +
    "\033\uff8e\034\uff8e\035\uff8e\041\uff8e\042\uff8e\044\uff8e\046" +
    "\uff8e\051\uff8e\052\uff8e\055\uff8e\056\uff8e\057\uff8e\062\uff8e" +
    "\063\uff8e\064\uff8e\066\uff8e\071\uff8e\073\uff8e\075\uff8e\077" +
    "\uff8e\100\uff8e\102\uff8e\103\uff8e\104\uff8e\105\uff8e\106\uff8e" +
    "\107\uff8e\001\002\000\012\012\032\034\035\042\036\105" +
    "\031\001\002\000\006\004\377\106\uff97\001\002\000\004" +
    "\106\uff98\001\002\000\004\106\u0101\001\002\000\004\016" +
    "\u0102\001\002\000\046\004\073\017\103\033\066\046\075" +
    "\051\067\052\076\056\063\057\102\062\100\063\065\071" +
    "\071\073\104\075\062\077\055\102\101\103\064\104\046" +
    "\106\072\001\002\000\004\067\u0104\001\002\000\004\044" +
    "\uff89\001\002\000\004\044\342\001\002\000\116\004\uff88" +
    "\010\uff88\012\uff88\013\uff88\015\uff88\017\uff88\021\uff88\022" +
    "\uff88\023\uff88\024\uff88\031\uff88\033\uff88\034\uff88\035\uff88" +
    "\041\uff88\042\uff88\044\uff88\046\uff88\051\uff88\052\uff88\055" +
    "\uff88\056\uff88\057\uff88\062\uff88\063\uff88\064\uff88\066\uff88" +
    "\071\uff88\073\uff88\075\uff88\077\uff88\100\uff88\102\uff88\103" +
    "\uff88\104\uff88\105\uff88\106\uff88\107\uff88\001\002\000\116" +
    "\004\uff87\010\uff87\012\uff87\013\uff87\015\uff87\017\uff87\021" +
    "\uff87\022\uff87\023\uff87\024\uff87\031\uff87\033\uff87\034\uff87" +
    "\035\uff87\041\uff87\042\uff87\044\uff87\046\uff87\051\uff87\052" +
    "\uff87\055\uff87\056\uff87\057\uff87\062\uff87\063\uff87\064\uff87" +
    "\066\uff87\071\uff87\073\uff87\075\uff87\077\uff87\100\uff87\102" +
    "\uff87\103\uff87\104\uff87\105\uff87\106\uff87\107\uff87\001\002" +
    "\000\046\004\073\017\103\033\066\046\075\051\067\052" +
    "\076\056\063\057\102\062\100\063\065\071\071\073\104" +
    "\075\062\077\055\102\101\103\064\104\046\106\072\001" +
    "\002\000\004\067\u010a\001\002\000\004\070\u010b\001\002" +
    "\000\116\004\uff85\010\uff85\012\uff85\013\uff85\015\uff85\017" +
    "\uff85\021\uff85\022\uff85\023\uff85\024\uff85\031\uff85\033\uff85" +
    "\034\uff85\035\uff85\041\uff85\042\uff85\044\uff85\046\uff85\051" +
    "\uff85\052\uff85\055\uff85\056\uff85\057\uff85\062\uff85\063\uff85" +
    "\064\uff85\066\uff85\071\uff85\073\uff85\075\uff85\077\uff85\100" +
    "\uff85\102\uff85\103\uff85\104\uff85\105\uff85\106\uff85\107\uff85" +
    "\001\002\000\012\036\uffd7\064\uffd7\076\uffd7\105\uffd7\001" +
    "\002\000\116\004\uffa9\010\uffa9\012\uffa9\013\uffa9\015\uffa9" +
    "\017\uffa9\021\uffa9\022\uffa9\023\uffa9\024\uffa9\031\uffa9\033" +
    "\uffa9\034\uffa9\035\uffa9\041\uffa9\042\uffa9\044\uffa9\046\uffa9" +
    "\051\uffa9\052\uffa9\055\uffa9\056\uffa9\057\uffa9\062\uffa9\063" +
    "\uffa9\064\uffa9\066\uffa9\071\uffa9\073\uffa9\075\uffa9\077\uffa9" +
    "\100\uffa9\102\uffa9\103\uffa9\104\uffa9\105\uffa9\106\uffa9\107" +
    "\uffa9\001\002\000\046\004\073\017\103\033\066\046\075" +
    "\051\067\052\076\056\063\057\102\062\100\063\065\071" +
    "\071\073\104\075\062\077\055\102\101\103\064\104\046" +
    "\106\072\001\002\000\004\070\u0110\001\002\000\116\004" +
    "\uff82\010\uff82\012\uff82\013\uff82\015\uff82\017\uff82\021\uff82" +
    "\022\uff82\023\uff82\024\uff82\031\uff82\033\uff82\034\uff82\035" +
    "\uff82\041\uff82\042\uff82\044\uff82\046\uff82\051\uff82\052\uff82" +
    "\055\uff82\056\uff82\057\uff82\062\uff82\063\uff82\064\uff82\066" +
    "\uff82\071\uff82\073\uff82\075\uff82\077\uff82\100\uff82\102\uff82" +
    "\103\uff82\104\uff82\105\uff82\106\uff82\107\uff82\001\002\000" +
    "\116\004\uffad\010\uffad\012\uffad\013\uffad\015\uffad\017\uffad" +
    "\021\uffad\022\uffad\023\uffad\024\uffad\031\uffad\033\uffad\034" +
    "\uffad\035\uffad\041\uffad\042\uffad\044\uffad\046\uffad\051\uffad" +
    "\052\uffad\055\uffad\056\uffad\057\uffad\062\uffad\063\uffad\064" +
    "\uffad\066\uffad\071\uffad\073\uffad\075\uffad\077\uffad\100\uffad" +
    "\102\uffad\103\uffad\104\uffad\105\uffad\106\uffad\107\uffad\001" +
    "\002\000\006\016\235\070\uff93\001\002\000\004\070\u0114" +
    "\001\002\000\116\004\uff3b\010\uff3b\012\uff3b\013\uff3b\015" +
    "\uff3b\017\uff3b\021\uff3b\022\uff3b\023\uff3b\024\uff3b\031\uff3b" +
    "\033\uff3b\034\uff3b\035\uff3b\041\uff3b\042\uff3b\044\uff3b\046" +
    "\uff3b\051\uff3b\052\uff3b\055\uff3b\056\uff3b\057\uff3b\062\uff3b" +
    "\063\uff3b\064\uff3b\066\uff3b\071\uff3b\073\uff3b\075\uff3b\077" +
    "\uff3b\100\uff3b\102\uff3b\103\uff3b\104\uff3b\105\uff3b\106\uff3b" +
    "\107\uff3b\001\002\000\116\004\073\010\uffe7\012\uffe7\013" +
    "\357\015\347\017\103\021\uffe7\022\335\023\334\024\333" +
    "\031\353\033\066\034\uffe7\035\361\041\363\042\uffe7\044" +
    "\342\046\075\051\067\052\076\055\343\056\063\057\102" +
    "\062\100\063\065\064\uffaf\066\337\071\071\073\104\075" +
    "\062\077\055\100\332\102\101\103\064\104\046\105\uffe7" +
    "\106\072\107\015\001\002\000\004\064\uffb2\001\002\000" +
    "\004\064\u0118\001\002\000\120\004\uffb1\010\uffb1\012\uffb1" +
    "\013\uffb1\015\uffb1\017\uffb1\021\uffb1\022\uffb1\023\uffb1\024" +
    "\uffb1\026\uffb1\031\uffb1\033\uffb1\034\uffb1\035\uffb1\041\uffb1" +
    "\042\uffb1\044\uffb1\046\uffb1\051\uffb1\052\uffb1\055\uffb1\056" +
    "\uffb1\057\uffb1\062\uffb1\063\uffb1\064\uffb1\066\uffb1\071\uffb1" +
    "\073\uffb1\075\uffb1\077\uffb1\100\uffb1\102\uffb1\103\uffb1\104" +
    "\uffb1\105\uffb1\106\uffb1\107\uffb1\001\002\000\004\070\u011b" +
    "\001\002\000\116\004\uff84\010\uff84\012\uff84\013\uff84\015" +
    "\uff84\017\uff84\021\uff84\022\uff84\023\uff84\024\uff84\031\uff84" +
    "\033\uff84\034\uff84\035\uff84\041\uff84\042\uff84\044\uff84\046" +
    "\uff84\051\uff84\052\uff84\055\uff84\056\uff84\057\uff84\062\uff84" +
    "\063\uff84\064\uff84\066\uff84\071\uff84\073\uff84\075\uff84\077" +
    "\uff84\100\uff84\102\uff84\103\uff84\104\uff84\105\uff84\106\uff84" +
    "\107\uff84\001\002\000\116\004\uff83\010\uff83\012\uff83\013" +
    "\uff83\015\uff83\017\uff83\021\uff83\022\uff83\023\uff83\024\uff83" +
    "\031\uff83\033\uff83\034\uff83\035\uff83\041\uff83\042\uff83\044" +
    "\uff83\046\uff83\051\uff83\052\uff83\055\uff83\056\uff83\057\uff83" +
    "\062\uff83\063\uff83\064\uff83\066\uff83\071\uff83\073\uff83\075" +
    "\uff83\077\uff83\100\uff83\102\uff83\103\uff83\104\uff83\105\uff83" +
    "\106\uff83\107\uff83\001\002\000\116\004\uff86\010\uff86\012" +
    "\uff86\013\uff86\015\uff86\017\uff86\021\uff86\022\uff86\023\uff86" +
    "\024\uff86\031\uff86\033\uff86\034\uff86\035\uff86\041\uff86\042" +
    "\uff86\044\uff86\046\uff86\051\uff86\052\uff86\055\uff86\056\uff86" +
    "\057\uff86\062\uff86\063\uff86\064\uff86\066\uff86\071\uff86\073" +
    "\uff86\075\uff86\077\uff86\100\uff86\102\uff86\103\uff86\104\uff86" +
    "\105\uff86\106\uff86\107\uff86\001\002\000\050\004\073\017" +
    "\103\027\u0120\033\066\046\075\051\067\052\076\056\063" +
    "\057\102\062\100\063\065\071\071\073\104\075\062\077" +
    "\055\102\101\103\064\104\046\106\072\001\002\000\006" +
    "\061\u0122\070\u0123\001\002\000\006\061\uff80\070\uff80\001" +
    "\002\000\006\061\uff7d\070\uff7d\001\002\000\006\061\uff7e" +
    "\070\uff7e\001\002\000\050\004\073\017\103\027\u0120\033" +
    "\066\046\075\051\067\052\076\056\063\057\102\062\100" +
    "\063\065\071\071\073\104\075\062\077\055\102\101\103" +
    "\064\104\046\106\072\001\002\000\116\004\uff81\010\uff81" +
    "\012\uff81\013\uff81\015\uff81\017\uff81\021\uff81\022\uff81\023" +
    "\uff81\024\uff81\031\uff81\033\uff81\034\uff81\035\uff81\041\uff81" +
    "\042\uff81\044\uff81\046\uff81\051\uff81\052\uff81\055\uff81\056" +
    "\uff81\057\uff81\062\uff81\063\uff81\064\uff81\066\uff81\071\uff81" +
    "\073\uff81\075\uff81\077\uff81\100\uff81\102\uff81\103\uff81\104" +
    "\uff81\105\uff81\106\uff81\107\uff81\001\002\000\006\061\uff7f" +
    "\070\uff7f\001\002\000\004\070\u0126\001\002\000\116\004" +
    "\uff3a\010\uff3a\012\uff3a\013\uff3a\015\uff3a\017\uff3a\021\uff3a" +
    "\022\uff3a\023\uff3a\024\uff3a\031\uff3a\033\uff3a\034\uff3a\035" +
    "\uff3a\041\uff3a\042\uff3a\044\uff3a\046\uff3a\051\uff3a\052\uff3a" +
    "\055\uff3a\056\uff3a\057\uff3a\062\uff3a\063\uff3a\064\uff3a\066" +
    "\uff3a\071\uff3a\073\uff3a\075\uff3a\077\uff3a\100\uff3a\102\uff3a" +
    "\103\uff3a\104\uff3a\105\uff3a\106\uff3a\107\uff3a\001\002\000" +
    "\046\004\073\017\103\033\066\046\075\051\067\052\076" +
    "\056\063\057\102\062\100\063\065\071\071\073\104\075" +
    "\062\077\055\102\101\103\064\104\046\106\072\001\002" +
    "\000\004\044\uff8b\001\002\000\004\044\342\001\002\000" +
    "\116\004\uff8a\010\uff8a\012\uff8a\013\uff8a\015\uff8a\017\uff8a" +
    "\021\uff8a\022\uff8a\023\uff8a\024\uff8a\031\uff8a\033\uff8a\034" +
    "\uff8a\035\uff8a\041\uff8a\042\uff8a\044\uff8a\046\uff8a\051\uff8a" +
    "\052\uff8a\055\uff8a\056\uff8a\057\uff8a\062\uff8a\063\uff8a\064" +
    "\uff8a\066\uff8a\071\uff8a\073\uff8a\075\uff8a\077\uff8a\100\uff8a" +
    "\102\uff8a\103\uff8a\104\uff8a\105\uff8a\106\uff8a\107\uff8a\001" +
    "\002\000\012\012\032\034\035\042\036\105\031\001\002" +
    "\000\006\020\uff9a\067\uff9a\001\002\000\004\106\u012e\001" +
    "\002\000\010\020\uffb7\045\132\067\uffb7\001\002\000\006" +
    "\020\uff99\067\uff99\001\002\000\004\046\uffd6\001\002\000" +
    "\004\046\u0132\001\002\000\004\067\u0133\001\002\000\004" +
    "\044\u0134\001\002\000\116\004\073\010\uffe7\012\uffe7\013" +
    "\357\015\347\017\103\021\uffe7\022\335\023\334\024\333" +
    "\031\353\033\066\034\uffe7\035\361\041\363\042\uffe7\044" +
    "\342\046\075\051\067\052\076\055\343\056\063\057\102" +
    "\062\100\063\065\064\uffaf\066\337\071\071\073\104\075" +
    "\062\077\055\100\332\102\101\103\064\104\046\105\uffe7" +
    "\106\072\107\015\001\002\000\004\064\u0136\001\002\000" +
    "\012\036\uffd5\064\uffd5\076\uffd5\105\uffd5\001\002\000\014" +
    "\012\032\034\035\042\036\101\u013a\105\031\001\002\000" +
    "\006\004\uffbf\106\uffbf\001\002\000\006\004\377\106\uff97" +
    "\001\002\000\006\004\uffbe\106\uffbe\001\002\000\004\106" +
    "\u013c\001\002\000\004\046\uffcf\001\002\000\004\046\u013e" +
    "\001\002\000\014\012\032\034\035\042\036\067\uff9c\105" +
    "\031\001\002\000\004\067\u0140\001\002\000\004\044\uffce" +
    "\001\002\000\004\044\u0142\001\002\000\116\004\073\010" +
    "\uffe7\012\uffe7\013\357\015\347\017\103\021\uffe7\022\335" +
    "\023\334\024\333\031\353\033\066\034\uffe7\035\361\041" +
    "\363\042\uffe7\044\342\046\075\051\067\052\076\055\343" +
    "\056\063\057\102\062\100\063\065\064\uffaf\066\337\071" +
    "\071\073\104\075\062\077\055\100\332\102\101\103\064" +
    "\104\046\105\uffe7\106\072\107\015\001\002\000\004\064" +
    "\uffcd\001\002\000\004\064\u0145\001\002\000\032\002\uffcc" +
    "\010\uffcc\012\uffcc\021\uffcc\032\uffcc\034\uffcc\036\uffcc\042" +
    "\uffcc\064\uffcc\074\uffcc\105\uffcc\107\uffcc\001\002\000\004" +
    "\016\u014c\001\002\000\004\106\u0148\001\002\000\006\045" +
    "\132\070\uffb7\001\002\000\004\070\ufff4\001\002\000\004" +
    "\070\u014b\001\002\000\030\002\ufff3\010\ufff3\012\ufff3\021" +
    "\ufff3\032\ufff3\034\ufff3\036\ufff3\042\ufff3\074\ufff3\105\ufff3" +
    "\107\ufff3\001\002\000\014\012\032\034\035\042\036\101" +
    "\u013a\105\031\001\002\000\004\106\u014e\001\002\000\004" +
    "\046\uffcb\001\002\000\004\046\u0150\001\002\000\014\012" +
    "\032\034\035\042\036\067\uff9c\105\031\001\002\000\004" +
    "\067\u0152\001\002\000\004\070\uffca\001\002\000\004\070" +
    "\u0154\001\002\000\030\002\uffc9\010\uffc9\012\uffc9\021\uffc9" +
    "\032\uffc9\034\uffc9\036\uffc9\042\uffc9\074\uffc9\105\uffc9\107" +
    "\uffc9\001\002\000\004\002\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0153\000\006\003\003\123\004\001\001\000\002\001" +
    "\001\000\026\004\021\005\017\006\015\007\016\010\005" +
    "\011\020\012\013\013\022\014\012\015\007\001\001\000" +
    "\002\001\001\000\006\101\025\102\u0146\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\101" +
    "\025\102\024\103\032\105\026\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\006\023\007\016\010\005\011\020\012\013\013\022" +
    "\014\012\015\007\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\053\117\116\260\117\261\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\053\117\117\116\001\001\000\004\101\036\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\042\044\055\045" +
    "\076\061\073\063\067\064\060\065\057\066\056\067\053" +
    "\070\052\071\050\072\046\073\044\074\042\075\043\076" +
    "\051\077\047\001\001\000\004\060\200\001\001\000\002" +
    "\001\001\000\004\057\173\001\001\000\002\001\001\000" +
    "\004\047\165\001\001\000\002\001\001\000\004\046\157" +
    "\001\001\000\004\061\206\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\131\202\001\001" +
    "\000\002\001\001\000\004\155\146\001\001\000\004\154" +
    "\142\001\001\000\002\001\001\000\014\045\076\061\073" +
    "\075\141\076\051\077\047\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\045" +
    "\076\061\073\075\122\076\051\077\047\001\001\000\014" +
    "\045\076\061\073\075\121\076\051\077\047\001\001\000" +
    "\050\045\076\061\073\063\111\064\060\065\057\066\056" +
    "\067\053\070\052\071\050\072\046\073\044\074\042\075" +
    "\043\076\051\077\047\101\025\102\024\103\107\105\110" +
    "\001\001\000\002\001\001\000\014\045\076\061\073\075" +
    "\106\076\051\077\047\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\045" +
    "\076\061\073\075\104\076\051\077\047\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\053" +
    "\117\117\116\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\045\076\061\073\075\114\076" +
    "\051\077\047\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\053\120\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\045\076" +
    "\061\073\075\124\076\051\077\047\101\025\102\024\103" +
    "\125\104\126\105\127\001\001\000\002\001\001\000\006" +
    "\053\117\117\116\001\001\000\010\054\133\113\132\114" +
    "\130\001\001\000\002\001\001\000\002\001\001\000\042" +
    "\044\135\045\076\061\073\063\067\064\060\065\057\066" +
    "\056\067\053\070\052\071\050\072\046\073\044\074\042" +
    "\075\043\076\051\077\047\001\001\000\004\054\134\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\034\045\076\061\073" +
    "\065\145\066\056\067\053\070\052\071\050\072\046\073" +
    "\044\074\042\075\144\076\051\077\047\001\001\000\002" +
    "\001\001\000\004\155\146\001\001\000\002\001\001\000" +
    "\032\045\076\061\073\066\150\067\053\070\052\071\050" +
    "\072\046\073\044\074\042\075\144\076\051\077\047\001" +
    "\001\000\002\001\001\000\030\045\076\061\073\067\152" +
    "\070\052\071\050\072\046\073\044\074\042\075\144\076" +
    "\051\077\047\001\001\000\002\001\001\000\026\045\076" +
    "\061\073\070\154\071\050\072\046\073\044\074\042\075" +
    "\144\076\051\077\047\001\001\000\002\001\001\000\024" +
    "\045\076\061\073\071\156\072\046\073\044\074\042\075" +
    "\144\076\051\077\047\001\001\000\004\046\157\001\001" +
    "\000\022\045\076\061\073\072\162\073\044\074\042\075" +
    "\144\076\051\077\047\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\047\165\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\045\076\061\073\073\170\074\042" +
    "\075\144\076\051\077\047\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\057\173\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\045\076\061\073\074\174\075" +
    "\144\076\051\077\047\001\001\000\004\060\200\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\045\076\061\073\075\201\076\051\077\047\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\040\045\076\061\073\063\221\064\060\065\057\066\056" +
    "\067\053\070\052\071\050\072\046\073\044\074\042\075" +
    "\043\076\051\077\047\001\001\000\044\045\076\061\073" +
    "\063\214\064\060\065\057\066\056\067\053\070\052\071" +
    "\050\072\046\073\044\074\042\075\043\076\051\077\047" +
    "\111\215\112\213\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\040\045\076\061\073\063\220\064\060" +
    "\065\057\066\056\067\053\070\052\071\050\072\046\073" +
    "\044\074\042\075\043\076\051\077\047\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\040\045" +
    "\076\061\073\063\224\064\060\065\057\066\056\067\053" +
    "\070\052\071\050\072\046\073\044\074\042\075\043\076" +
    "\051\077\047\001\001\000\002\001\001\000\002\001\001" +
    "\000\042\044\227\045\076\061\073\063\067\064\060\065" +
    "\057\066\056\067\053\070\052\071\050\072\046\073\044" +
    "\074\042\075\043\076\051\077\047\001\001\000\004\130" +
    "\230\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\054\133\113\132\114\233\001\001\000\006\051\235\052" +
    "\236\001\001\000\002\001\001\000\004\127\237\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\044\045\076\061\073\063\214\064\060\065\057\066\056" +
    "\067\053\070\052\071\050\072\046\073\044\074\042\075" +
    "\043\076\051\077\047\111\242\112\213\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\040\045" +
    "\076\061\073\063\246\064\060\065\057\066\056\067\053" +
    "\070\052\071\050\072\046\073\044\074\042\075\043\076" +
    "\051\077\047\001\001\000\004\126\247\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\054\133\113\132\114" +
    "\252\001\001\000\004\050\253\001\001\000\004\125\256" +
    "\001\001\000\040\045\076\061\073\063\255\064\060\065" +
    "\057\066\056\067\053\070\052\071\050\072\046\073\044" +
    "\074\042\075\043\076\051\077\047\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\053\120\001\001\000\002\001\001\000\004\132" +
    "\264\001\001\000\016\021\267\101\025\102\024\103\107" +
    "\105\266\115\265\001\001\000\026\016\301\017\273\021" +
    "\275\022\302\023\277\024\300\101\025\102\024\103\107" +
    "\105\266\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\054\133\113\132\114\271\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\135\316\001\001\000\010\016\301" +
    "\017\273\024\315\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\133\303\001\001\000\012\007\306\025\307" +
    "\026\305\027\304\001\001\000\002\001\001\000\006\007" +
    "\306\027\313\001\001\000\002\001\001\000\004\134\310" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\135\316\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\062\322\101\025\102" +
    "\024\103\125\104\320\105\127\107\323\110\321\001\001" +
    "\000\004\020\u012c\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\136\325\001\001\000\002" +
    "\001\001\000\104\012\354\013\357\014\012\030\355\031" +
    "\345\032\347\034\353\035\340\036\364\037\361\040\330" +
    "\041\327\042\335\043\337\045\076\055\344\056\363\061" +
    "\073\063\350\064\060\065\057\066\056\067\053\070\052" +
    "\071\050\072\046\073\044\074\042\075\043\076\051\077" +
    "\047\120\351\121\343\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\151\u0126\001\001\000\014\045\076\061" +
    "\073\075\u0124\076\051\077\047\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\040\045\076\061" +
    "\073\063\u0118\064\060\065\057\066\056\067\053\070\052" +
    "\071\050\072\046\073\044\074\042\075\043\076\051\077" +
    "\047\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\145\u0114\001\001\000\014\045\076\061\073\075\u0111\076" +
    "\051\077\047\001\001\000\100\012\354\013\357\014\012" +
    "\030\u0110\031\345\032\347\034\353\035\340\036\364\037" +
    "\361\040\330\041\327\042\335\043\337\045\076\055\344" +
    "\056\363\061\073\063\350\064\060\065\057\066\056\067" +
    "\053\070\052\071\050\072\046\073\044\074\042\075\043" +
    "\076\051\077\047\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\040\045" +
    "\076\061\073\063\365\064\060\065\057\066\056\067\053" +
    "\070\052\071\050\072\046\073\044\074\042\075\043\076" +
    "\051\077\047\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\147\366\001\001\000\004\031\367\001\001\000" +
    "\004\150\370\001\001\000\004\033\371\001\001\000\002" +
    "\001\001\000\004\031\373\001\001\000\002\001\001\000" +
    "\014\101\025\102\024\103\125\104\375\105\127\001\001" +
    "\000\004\020\377\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\040\045\076\061\073\063\u0102" +
    "\064\060\065\057\066\056\067\053\070\052\071\050\072" +
    "\046\073\044\074\042\075\043\076\051\077\047\001\001" +
    "\000\002\001\001\000\004\153\u0104\001\001\000\004\031" +
    "\u0105\001\001\000\002\001\001\000\002\001\001\000\040" +
    "\045\076\061\073\063\u0108\064\060\065\057\066\056\067" +
    "\053\070\052\071\050\072\046\073\044\074\042\075\043" +
    "\076\051\077\047\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\045\076\061\073\075\u010e\076\051\077\047\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\051\u0112\052\236\001\001\000\002\001\001\000" +
    "\002\001\001\000\104\012\354\013\357\014\012\030\355" +
    "\031\345\032\347\034\353\035\340\036\364\037\361\040" +
    "\330\041\327\042\335\043\337\045\076\055\344\056\363" +
    "\061\073\063\350\064\060\065\057\066\056\067\053\070" +
    "\052\071\050\072\046\073\044\074\042\075\043\076\051" +
    "\077\047\120\u0115\121\343\001\001\000\004\146\u0116\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\044\045\076\061\073\063\u0120\064\060\065\057\066\056" +
    "\067\053\070\052\071\050\072\046\073\044\074\042\075" +
    "\043\076\051\077\047\100\u011e\122\u011d\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\042\045\076\061\073\063\u0120\064\060\065\057" +
    "\066\056\067\053\070\052\071\050\072\046\073\044\074" +
    "\042\075\043\076\051\077\047\100\u0123\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\040\045\076\061\073\063\u0127\064\060\065\057" +
    "\066\056\067\053\070\052\071\050\072\046\073\044\074" +
    "\042\075\043\076\051\077\047\001\001\000\004\152\u0128" +
    "\001\001\000\004\031\u0129\001\001\000\002\001\001\000" +
    "\016\062\u012b\101\025\102\024\103\125\104\320\105\127" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\054" +
    "\133\113\132\114\u012e\001\001\000\002\001\001\000\004" +
    "\137\u0130\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\104\012\354\013\357\014\012\030\355" +
    "\031\345\032\347\034\353\035\340\036\364\037\361\040" +
    "\330\041\327\042\335\043\337\045\076\055\344\056\363" +
    "\061\073\063\350\064\060\065\057\066\056\067\053\070" +
    "\052\071\050\072\046\073\044\074\042\075\043\076\051" +
    "\077\047\120\u0134\121\343\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\101\025\102\024\103\125\104\u0137" +
    "\105\127\106\u0138\001\001\000\002\001\001\000\004\020" +
    "\u013a\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\140\u013c\001\001\000\002\001\001\000\022\062\322\101" +
    "\025\102\024\103\125\104\320\105\127\107\u013e\110\321" +
    "\001\001\000\002\001\001\000\004\141\u0140\001\001\000" +
    "\002\001\001\000\104\012\354\013\357\014\012\030\355" +
    "\031\345\032\347\034\353\035\340\036\364\037\361\040" +
    "\330\041\327\042\335\043\337\045\076\055\344\056\363" +
    "\061\073\063\350\064\060\065\057\066\056\067\053\070" +
    "\052\071\050\072\046\073\044\074\042\075\043\076\051" +
    "\077\047\120\u0142\121\343\001\001\000\004\142\u0143\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\054\133\113\132\114\u0148\001" +
    "\001\000\004\124\u0149\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\101\025\102\024\103\125\104\u0137\105" +
    "\127\106\u014c\001\001\000\002\001\001\000\004\143\u014e" +
    "\001\001\000\002\001\001\000\022\062\322\101\025\102" +
    "\024\103\125\104\320\105\127\107\u0150\110\321\001\001" +
    "\000\002\001\001\000\004\144\u0152\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 2;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return new Symbol (sym.EOF); 
    }



}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // UnarySign ::= T_PLUS 
            {
              Object RESULT = null;
		
                    RESULT = "+";
                
              CUP$parser$result = new java_cup.runtime.Symbol(35/*UnarySign*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // UnarySign ::= T_MINUS 
            {
              Object RESULT = null;
		
                    RESULT = "-";
                
              CUP$parser$result = new java_cup.runtime.Symbol(35/*UnarySign*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // DeleteStmt ::= T_DELETE Designator T_SEMI 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        RESULT = ((MyParser) parser).DoDelete(_1);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(44/*DeleteStmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // NewStmt ::= T_NEW Designator OptCtorCall T_SEMI 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object _2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        RESULT = ((MyParser) parser).DoNew(_1,((Vector<STO>)_2));
                    
              CUP$parser$result = new java_cup.runtime.Symbol(43/*NewStmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // Designator3 ::= T_ID 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = ((MyParser) parser).DoDesignator3_ID (_1);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(61/*Designator3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // Designator3 ::= T_COLONCOLON T_ID 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = ((MyParser) parser).DoDes3_GlobalID (_1);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(61/*Designator3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // Designator3 ::= T_THIS 
            {
              STO RESULT = null;
		
                        ((MyParser) parser).toggleInThisFlag();
                        RESULT = ((MyParser) parser).getCurrentStruct();
                        RESULT.setIsModifiable(false);
                        RESULT.setIsAddressable(false); // fix me!
                    
              CUP$parser$result = new java_cup.runtime.Symbol(61/*Designator3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // Designator3 ::= T_NULLPTR 
            {
              STO RESULT = null;
		
                        RESULT = new ExprSTO ("nullptr", new NullPointerType("nullptr"));     // fix me!
                        RESULT.setIsModifiable(false);
                        RESULT.setIsAddressable(false); 
                    
              CUP$parser$result = new java_cup.runtime.Symbol(61/*Designator3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // Designator3 ::= T_FALSE 
            {
              STO RESULT = null;
		
                        RESULT = new ConstSTO ("false", new BoolType("bool"), 0);   // fix me! Done
                    
              CUP$parser$result = new java_cup.runtime.Symbol(61/*Designator3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // Designator3 ::= T_TRUE 
            {
              STO RESULT = null;
		
                        RESULT = new ConstSTO ("true", new BoolType("bool"), 1);    // fix me! Done
                    
              CUP$parser$result = new java_cup.runtime.Symbol(61/*Designator3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // Designator3 ::= T_STR_LITERAL 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = new ConstSTO (_1);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(61/*Designator3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // Designator3 ::= T_FLOAT_LITERAL 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = new ConstSTO (_1, new FloatType("float"), Float.parseFloat(_1));  // fix me! Done
                        RESULT.setIsAddressable(false);
                        RESULT.setIsModifiable(false);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(61/*Designator3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // Designator3 ::= T_INT_LITERAL 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
                        RESULT = new ConstSTO (_1, new IntType("int"), Integer.parseInt(_1));    // fix me! Done
                        RESULT.setIsAddressable(false);
                        RESULT.setIsModifiable(false);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(61/*Designator3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // Designator3 ::= T_LPAREN Expr T_RPAREN 
            {
              STO RESULT = null;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		STO _2 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        RESULT = _2;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(61/*Designator3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // Designator2 ::= Designator3 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(60/*Designator2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // Designator2 ::= Designator2 T_LPAREN OptExprList T_RPAREN 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector _2 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        ((MyParser) parser).SaveLineNum(); 

                        RESULT = ((MyParser) parser).DoFuncCall (_1,_2);
                       
                    
              CUP$parser$result = new java_cup.runtime.Symbol(60/*Designator2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // Designator2 ::= Designator2 IncDecOp 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        ((MyParser) parser).SaveLineNum(); 


                        RESULT = ((MyParser) parser).postDoIncDecCheck(_2,_1);

                    
              CUP$parser$result = new java_cup.runtime.Symbol(60/*Designator2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // Designator2 ::= Designator2 T_ARROW T_ID 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = ((MyParser) parser).DoNullPointerCheck(_1);
                        RESULT = ((MyParser) parser).DoPointerArrowCheck(RESULT, _2); 
                    
                    
              CUP$parser$result = new java_cup.runtime.Symbol(60/*Designator2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // Designator2 ::= Designator2 T_LBRACKET Expr T_RBRACKET 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		STO _2 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        
                        RESULT = ((MyParser) parser).DoDesignator2_Array (_1,_2);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(60/*Designator2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // Designator2 ::= Designator2 T_DOT T_ID 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        //((MyParser) parser).setStructFunCall(true); // add 10/29
                        ((MyParser) parser).getName(_3);
                        ((MyParser) parser).setCallingStruct(_1); // add 10/29
                        RESULT = ((MyParser) parser).DoDesignator2_Dot (_1, _3);
                        //((MyParser) parser).setStructFunCall(false); // add 10/29

                    
              CUP$parser$result = new java_cup.runtime.Symbol(60/*Designator2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // Designator ::= Designator2 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(59/*Designator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // Designator ::= IncDecOp Designator 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _2 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = ((MyParser) parser).preDoIncDecCheck(_1,_2);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(59/*Designator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // Designator ::= T_LPAREN DecoratedType T_RPAREN Designator 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _2 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = ((MyParser) parser).DoTypeCast(_1,_2);
                        //RESULT = _2;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(59/*Designator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // Designator ::= T_SIZEOF T_LPAREN Type OptArrayList T_RPAREN 
            {
              STO RESULT = null;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type _2 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector _3 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        RESULT = ((MyParser) parser).DoSizeOf(_2, _3);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(59/*Designator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // Designator ::= T_SIZEOF T_LPAREN Designator T_RPAREN 
            {
              STO RESULT = null;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		STO _2 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        RESULT = ((MyParser) parser).DoSizeOf(_2);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(59/*Designator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // Designator ::= T_NOT Designator 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                         RESULT = ((MyParser) parser).DoUnaryExpr(_1, new NotOp(_1));
                    
              CUP$parser$result = new java_cup.runtime.Symbol(59/*Designator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // Designator ::= UnarySign Designator 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object _1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _2 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		

                        RESULT = ((MyParser) parser).DoUnarySign((String)_1,_2);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(59/*Designator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // Designator ::= T_AMPERSAND Designator 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = ((MyParser) parser).DoAddressOf(_1);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(59/*Designator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // Designator ::= T_STAR Designator 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = ((MyParser) parser).DoNullPointerCheck(_1);
                        RESULT = ((MyParser) parser).DoPointerCheck(RESULT);
                        RESULT = ((MyParser) parser).DoDereference(RESULT); 
                    
              CUP$parser$result = new java_cup.runtime.Symbol(59/*Designator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // IncDecOp ::= T_MINUSMINUS 
            {
              String RESULT = null;
		
                        RESULT = "--";
                    
              CUP$parser$result = new java_cup.runtime.Symbol(47/*IncDecOp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // IncDecOp ::= T_PLUSPLUS 
            {
              String RESULT = null;
		
                        RESULT = "++";
                    
              CUP$parser$result = new java_cup.runtime.Symbol(47/*IncDecOp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // MulOp ::= T_MOD 
            {
              String RESULT = null;
		
                        RESULT = "%";
                    
              CUP$parser$result = new java_cup.runtime.Symbol(46/*MulOp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // MulOp ::= T_SLASH 
            {
              String RESULT = null;
		
                        RESULT = "/";
                    
              CUP$parser$result = new java_cup.runtime.Symbol(46/*MulOp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // MulOp ::= T_STAR 
            {
              String RESULT = null;
		
                        RESULT = "*";
                    
              CUP$parser$result = new java_cup.runtime.Symbol(46/*MulOp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // AddOp ::= T_MINUS 
            {
              String RESULT = null;
		
                        RESULT = "-";
                    
              CUP$parser$result = new java_cup.runtime.Symbol(45/*AddOp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // AddOp ::= T_PLUS 
            {
              String RESULT = null;
		
                        RESULT = "+";
                    
              CUP$parser$result = new java_cup.runtime.Symbol(45/*AddOp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // Relation ::= T_GTE 
            {
              Object RESULT = null;
		
                        RESULT = ">=";
                    
              CUP$parser$result = new java_cup.runtime.Symbol(37/*Relation*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // Relation ::= T_LTE 
            {
              Object RESULT = null;
		
                        RESULT = "<=";
                    
              CUP$parser$result = new java_cup.runtime.Symbol(37/*Relation*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // Relation ::= T_GT 
            {
              Object RESULT = null;
		
                        RESULT = ">";
                    
              CUP$parser$result = new java_cup.runtime.Symbol(37/*Relation*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // Relation ::= T_LT 
            {
              Object RESULT = null;
		
                        RESULT = "<";
                    
              CUP$parser$result = new java_cup.runtime.Symbol(37/*Relation*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // Equality ::= T_NEQ 
            {
              Object RESULT = null;
		
                        RESULT = "!=";
                    
              CUP$parser$result = new java_cup.runtime.Symbol(36/*Equality*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // Equality ::= T_EQU 
            {
              Object RESULT = null;
		
                        RESULT = "==";
                    
              CUP$parser$result = new java_cup.runtime.Symbol(36/*Equality*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // Expr8 ::= Designator 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(58/*Expr8*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // Expr8 ::= Expr8 MulOp Designator 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String _2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _3 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        ((MyParser) parser).SaveLineNum(); 

                        if(_2.equals("*")){
                            RESULT = ((MyParser) parser).DoBinaryExpr (_1,new MulOp(_1,_3, _2),_3);
                        }
                        else if(_2.equals("/")){
                            RESULT = ((MyParser) parser).DoBinaryExpr (_1,new DivOp(_1,_3, _2),_3);
                        }
                        else{
                            RESULT = ((MyParser) parser).DoBinaryExpr (_1,new ModOp(_1,_3, _2),_3);
                        }
                    
              CUP$parser$result = new java_cup.runtime.Symbol(58/*Expr8*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // Expr7 ::= Expr8 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(57/*Expr7*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // Expr7 ::= Expr7 AddOp Expr8 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String _2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _3 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        ((MyParser) parser).SaveLineNum(); 

                        if(_2.equals("+")) {
                            RESULT = ((MyParser) parser).DoBinaryExpr (_1,new AddOp(_1,_3, _2),_3);    
                        }
                        else {
                            RESULT = ((MyParser) parser).DoBinaryExpr (_1,new MinusOp(_1,_3, _2),_3);   
                        }
                        

                    
              CUP$parser$result = new java_cup.runtime.Symbol(57/*Expr7*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // Expr6 ::= Expr7 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(56/*Expr6*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // Expr6 ::= Expr6 Relation Expr7 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object _2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _3 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        ((MyParser) parser).SaveLineNum(); 

                        if(_2.equals("<")) {
                            RESULT = ((MyParser) parser).DoBinaryExpr (_1,new LTOp(_1,_3,(String)_2),_3);    
                        }
                        else if(_2.equals("<=")) {
                            RESULT = ((MyParser) parser).DoBinaryExpr (_1,new LTEOp(_1,_3,(String)_2),_3);    
                        }
                        else if(_2.equals(">")) {
                            RESULT = ((MyParser) parser).DoBinaryExpr (_1,new GTOp(_1,_3,(String)_2),_3);    
                        }
                        if(_2.equals(">=")) {
                            RESULT = ((MyParser) parser).DoBinaryExpr (_1,new GTEOp(_1,_3,(String)_2),_3);    
                        }

                    
              CUP$parser$result = new java_cup.runtime.Symbol(56/*Expr6*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // Expr5 ::= Expr6 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(55/*Expr5*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // Expr5 ::= Expr5 Equality Expr6 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object _2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _3 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        ((MyParser) parser).SaveLineNum(); 

                        if(_2.equals("==")) {
                            RESULT = ((MyParser) parser).DoBinaryExpr (_1,new EqualOp(_1,_3,(String)_2),_3);    
                        }
                        else if(_2.equals("!=")) {
                            RESULT = ((MyParser) parser).DoBinaryExpr (_1,new NotEqualOp(_1,_3,(String)_2),_3);    
                        }

                    
              CUP$parser$result = new java_cup.runtime.Symbol(55/*Expr5*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // Expr4 ::= Expr5 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(54/*Expr4*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // Expr4 ::= Expr4 T_AMPERSAND Expr5 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _2 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        ((MyParser) parser).SaveLineNum(); 

                         RESULT = ((MyParser) parser).DoBinaryExpr (_1,new AmpersandOp(_1,_2),_2);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(54/*Expr4*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // Expr3 ::= Expr4 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(53/*Expr3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // Expr3 ::= Expr3 T_CARET Expr4 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _2 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        ((MyParser) parser).SaveLineNum(); 

                        RESULT = ((MyParser) parser).DoBinaryExpr (_1,new CaretOp(_1,_2),_2);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(53/*Expr3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // Expr2 ::= Expr3 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(52/*Expr2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // Expr2 ::= Expr2 T_BAR Expr3 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _2 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        ((MyParser) parser).SaveLineNum(); 

                        RESULT = ((MyParser) parser).DoBinaryExpr (_1,new BarOp(_1,_2),_2);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(52/*Expr2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // Expr1 ::= Expr2 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(51/*Expr1*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // Expr1 ::= Expr1 NT$26 T_AND Expr2 
            {
              STO RESULT = null;
              // propagate RESULT from NT$26
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value != null )
                RESULT = (STO) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _2 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        ((MyParser) parser).SaveLineNum(); 
                         
                        RESULT = ((MyParser) parser).DoBinaryExpr (_1, new AndOp(_1,_2),_2);
                        ((MyParser) parser).DoRHS(_1,_2, "&&", RESULT);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(51/*Expr1*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // NT$26 ::= 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

                        ((MyParser) parser).DoLHS(_1, "&&");
                    
              CUP$parser$result = new java_cup.runtime.Symbol(107/*NT$26*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // Expr0 ::= Expr1 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(50/*Expr0*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // Expr0 ::= Expr0 NT$25 T_OR Expr1 
            {
              STO RESULT = null;
              // propagate RESULT from NT$25
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value != null )
                RESULT = (STO) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _2 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        ((MyParser) parser).SaveLineNum();
                        RESULT = ((MyParser) parser).DoBinaryExpr (_1, new OrOp(_1,_2),_2); 
                        ((MyParser) parser).DoRHS(_1,_2, "||", RESULT);

                    
              CUP$parser$result = new java_cup.runtime.Symbol(50/*Expr0*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // NT$25 ::= 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

                        ((MyParser) parser).DoLHS(_1, "||");
                    
              CUP$parser$result = new java_cup.runtime.Symbol(106/*NT$25*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // Expr ::= Expr0 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                       // I changed this -- 11/18
                       // ((MyParser)parser).DoBoolWrite();
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(49/*Expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // Expr ::= Designator T_ASSIGN Expr 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _2 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        // we add this, not given
                      // ((MyParser) parser).DoBoolWrite(); 
                        RESULT = ((MyParser) parser).DoAssignTypeCheck(_1,_2);
                        
                       
                    
              CUP$parser$result = new java_cup.runtime.Symbol(49/*Expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // ExprList ::= ExprList T_COMMA Expr 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Vector _1 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _2 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                        RESULT.addElement(_2);

                    
              CUP$parser$result = new java_cup.runtime.Symbol(72/*ExprList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // ExprList ::= Expr 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = new Vector();
                        RESULT.addElement(_1);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(72/*ExprList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // OptExprList ::= 
            {
              Vector RESULT = null;
		
                        RESULT = new Vector();
                    
              CUP$parser$result = new java_cup.runtime.Symbol(71/*OptExprList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // OptExprList ::= ExprList 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Vector _1 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(71/*OptExprList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // ConstExpr ::= Expr 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(34/*ConstExpr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // WritePair ::= T_ENDL 
            {
              STO RESULT = null;
		
                        RESULT = new ExprSTO("endl");
                    
              CUP$parser$result = new java_cup.runtime.Symbol(62/*WritePair*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // WritePair ::= Expr 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(62/*WritePair*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // WritePairList ::= WritePairList T_OSTREAM WritePair 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Vector _1 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _2 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                        RESULT.addElement(_2);
                        ((MyParser)parser).DoPrint(_2);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(80/*WritePairList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // WritePairList ::= WritePair 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = new Vector<STO>();
                        RESULT.addElement(_1);
                        ((MyParser) parser).DoPrint(_1);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(80/*WritePairList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // WriteStmt ::= T_COUT T_OSTREAM WritePairList T_SEMI 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector _1 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                       // ((MyParser) parser).DoPrint(_1);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(33/*WriteStmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // ReadStmt ::= T_CIN T_ISTREAM Designator T_SEMI 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                      ((MyParser) parser).DoCin(_1);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(32/*ReadStmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // ReturnStmt ::= T_RETURN Expr T_SEMI 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object _1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		STO _2 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        //RESULT = "return"; // changed
                       RESULT = ((MyParser)parser).DoReturnStmt(_2);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(31/*ReturnStmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // ReturnStmt ::= T_RETURN T_SEMI 
            {
              Object RESULT = null;
		
                       RESULT = ((MyParser)parser).DoReturnStmt();
                    
              CUP$parser$result = new java_cup.runtime.Symbol(31/*ReturnStmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // ExitStmt ::= T_EXIT T_LPAREN Expr T_RPAREN T_SEMI 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                        ((MyParser) parser).DoExit(_1);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(30/*ExitStmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // ContinueStmt ::= T_CONTINUE T_SEMI 
            {
              Object RESULT = null;
		
                        ((MyParser) parser).DoContinue();
                    
              CUP$parser$result = new java_cup.runtime.Symbol(29/*ContinueStmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // BreakStmt ::= T_BREAK T_SEMI 
            {
              Object RESULT = null;
		
                        ((MyParser) parser).DoBreak();
                    
              CUP$parser$result = new java_cup.runtime.Symbol(28/*BreakStmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // ForeachStmt ::= T_FOREACH T_LPAREN Type OptRef T_ID T_COLON Expr T_RPAREN NT$24 CodeBlock 
            {
              Object RESULT = null;
              // propagate RESULT from NT$24
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object _2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int _4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int _4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		STO _4 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
                        ((MyParser) parser).CallDoForEachEnd();

                        ((MyParser) parser).DoExitLoop();
                        ((MyParser) parser).DoBlockClose();
                    
              CUP$parser$result = new java_cup.runtime.Symbol(26/*ForeachStmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // NT$24 ::= 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object _2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int _4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		STO _4 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

                        ((MyParser) parser).DoBlockOpen();
                        ((MyParser) parser).DoInLoop();
                        ((MyParser) parser).DoForEachDecl (_1,_2,_3,_4); //changed Done
                    
              CUP$parser$result = new java_cup.runtime.Symbol(105/*NT$24*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // WhileStmt ::= T_WHILE NT$22 Expr NT$23 CodeBlock 
            {
              Object RESULT = null;
              // propagate RESULT from NT$22
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
              // propagate RESULT from NT$23
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                        ((MyParser) parser).CallDoWhileCloseLoop();
                        ((MyParser) parser).DoExitLoop();
                    
              CUP$parser$result = new java_cup.runtime.Symbol(27/*WhileStmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // NT$23 ::= 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

                        RESULT =((MyParser) parser).DoWhile(_1);

                        ((MyParser) parser).DoInLoop();
                    
              CUP$parser$result = new java_cup.runtime.Symbol(104/*NT$23*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // NT$22 ::= 
            {
              Object RESULT = null;

                        ((MyParser) parser).CallDoWhileOpenLoop();
                    
              CUP$parser$result = new java_cup.runtime.Symbol(103/*NT$22*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // OptElse ::= 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(25/*OptElse*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // OptElse ::= T_ELSE CodeBlock 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(25/*OptElse*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // IfStmt ::= T_IF Expr NT$20 CodeBlock NT$21 OptElse 
            {
              Object RESULT = null;
              // propagate RESULT from NT$20
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
              // propagate RESULT from NT$21
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		
                        ((MyParser) parser).CallDoIfEnd();
                    
              CUP$parser$result = new java_cup.runtime.Symbol(24/*IfStmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // NT$21 ::= 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

                        ((MyParser) parser).CallDoElse();
                    
              CUP$parser$result = new java_cup.runtime.Symbol(102/*NT$21*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // NT$20 ::= 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

                        RESULT =((MyParser) parser).DoIf(_1);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(101/*NT$20*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // CtorCall ::= T_COLON T_LPAREN OptExprList T_RPAREN 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector _1 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(40/*CtorCall*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // OptCtorCall ::= 
            {
              Object RESULT = null;
		
                        RESULT = new Vector();
                    
              CUP$parser$result = new java_cup.runtime.Symbol(39/*OptCtorCall*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // OptCtorCall ::= CtorCall 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object _1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(39/*OptCtorCall*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // OptInit ::= 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(38/*OptInit*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // OptInit ::= T_ASSIGN Expr 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(38/*OptInit*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // OptRef ::= 
            {
              Object RESULT = null;
		
                        RESULT = "";
                    
              CUP$parser$result = new java_cup.runtime.Symbol(14/*OptRef*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // OptRef ::= T_AMPERSAND 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object _1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = "&";
                    
              CUP$parser$result = new java_cup.runtime.Symbol(14/*OptRef*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // ParamDecl ::= Type OptRef T_ID OptArrayList 
            {
              String RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object _2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Vector _4 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
                        RESULT = new String(_1.getName()  +_2 +" "+ _3 + " " + ((MyParser) parser).processArray(_4));
                    
              CUP$parser$result = new java_cup.runtime.Symbol(48/*ParamDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // ParamList ::= ParamList T_COMMA ParamDecl 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Vector _1 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                        RESULT.addElement (_2);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(70/*ParamList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // ParamList ::= ParamDecl 
            {
              Vector RESULT = null;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = new Vector ();
                        RESULT.addElement (_2);

                    
              CUP$parser$result = new java_cup.runtime.Symbol(70/*ParamList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // OptParamList ::= 
            {
              Vector RESULT = null;
		
                        RESULT = new Vector();
                    
              CUP$parser$result = new java_cup.runtime.Symbol(69/*OptParamList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // OptParamList ::= ParamList 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Vector _1 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;

                    
              CUP$parser$result = new java_cup.runtime.Symbol(69/*OptParamList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // Stmt ::= DeleteStmt 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(22/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // Stmt ::= NewStmt 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(22/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // Stmt ::= WriteStmt 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(22/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // Stmt ::= ReadStmt 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(22/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // Stmt ::= ReturnStmt 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object _1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(22/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // Stmt ::= ExitStmt 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(22/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // Stmt ::= ContinueStmt 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(22/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // Stmt ::= BreakStmt 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(22/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // Stmt ::= ForeachStmt 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(22/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // Stmt ::= WhileStmt 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(22/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // Stmt ::= IfStmt 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(22/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // Stmt ::= Expr T_SEMI 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(22/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // Stmt ::= CodeBlock 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(22/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // Stmt ::= ConstDecl 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(22/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Stmt ::= VarDecl 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(22/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // StmtList ::= StmtList Stmt 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector _1 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object _2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                        RESULT.addElement(_2);
                        ((MyParser) parser).DoBoolWrite();
                    
              CUP$parser$result = new java_cup.runtime.Symbol(79/*StmtList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // StmtList ::= Stmt 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object _1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = new Vector();
                        RESULT.addElement(_1);
                        ((MyParser) parser).DoBoolWrite();
                    
              CUP$parser$result = new java_cup.runtime.Symbol(79/*StmtList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // OptStmtList ::= 
            {
              Vector RESULT = null;
		
                        RESULT = new Vector();
                    
              CUP$parser$result = new java_cup.runtime.Symbol(78/*OptStmtList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // OptStmtList ::= StmtList 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Vector _1 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(78/*OptStmtList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // CodeBlock ::= T_LBRACE NT$18 OptStmtList NT$19 T_RBRACE 
            {
              Object RESULT = null;
              // propagate RESULT from NT$18
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
              // propagate RESULT from NT$19
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(23/*CodeBlock*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // NT$19 ::= 
            {
              Object RESULT = null;
 

                      //  ((MyParser) parser).DoExitLoop();
                        ((MyParser) parser).DoBlockClose();
                    
              CUP$parser$result = new java_cup.runtime.Symbol(100/*NT$19*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // NT$18 ::= 
            {
              Object RESULT = null;
 ((MyParser) parser).DoBlockOpen(); 
              CUP$parser$result = new java_cup.runtime.Symbol(99/*NT$18*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Array ::= T_LBRACKET ConstExpr T_RBRACKET 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object _1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        RESULT =_1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(42/*Array*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // ArrayList ::= ArrayList Array 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector _1 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object _2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                        RESULT.addElement(_2);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(73/*ArrayList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // ArrayList ::= Array 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object _1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = new Vector();
                        RESULT.addElement(_1);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(73/*ArrayList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // OptArrayList ::= 
            {
              Vector RESULT = null;
		
                        RESULT = new Vector();
                    
              CUP$parser$result = new java_cup.runtime.Symbol(74/*OptArrayList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // OptArrayList ::= ArrayList 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Vector _1 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(74/*OptArrayList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Pointer ::= T_STAR 
            {
              Object RESULT = null;
		
                        RESULT = "*";
                    
              CUP$parser$result = new java_cup.runtime.Symbol(41/*Pointer*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // PointerList ::= PointerList Pointer 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector _1 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object _2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                        RESULT.addElement(_2);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(77/*PointerList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // PointerList ::= Pointer 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object _1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = new Vector();
                        RESULT.addElement(_1);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(77/*PointerList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // OptPointerList ::= 
            {
              Vector RESULT = null;
		
                        RESULT = new Vector();
                    
              CUP$parser$result = new java_cup.runtime.Symbol(76/*OptPointerList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // OptPointerList ::= PointerList 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Vector _1 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(76/*OptPointerList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ReturnType ::= T_VOID 
            {
              Type RESULT = null;
		
                        RESULT = new VoidType("void",0);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(68/*ReturnType*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ReturnType ::= Type 
            {
              Type RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(68/*ReturnType*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // StructType ::= T_ID_U 
            {
              Type RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                       RESULT = ((MyParser) parser).DoStructType_ID (_1);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(65/*StructType*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // BasicType ::= T_BOOL 
            {
              Type RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object _1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = new BoolType("bool");  // gotta do something here! Done
                    
              CUP$parser$result = new java_cup.runtime.Symbol(63/*BasicType*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // BasicType ::= T_FLOAT 
            {
              Type RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object _1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = new FloatType("float");  // gotta do something here! Done
                    
              CUP$parser$result = new java_cup.runtime.Symbol(63/*BasicType*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // BasicType ::= T_INT 
            {
              Type RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object _1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = new IntType("int");  // gotta do something here! Done 
                    
              CUP$parser$result = new java_cup.runtime.Symbol(63/*BasicType*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // DecoratedBasicType ::= BasicType OptPointerList 
            {
              Type RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Vector _2 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = ((MyParser) parser).DoPointer(_1,_2);    // gotta do something here!
                    
              CUP$parser$result = new java_cup.runtime.Symbol(64/*DecoratedBasicType*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // DecoratedType ::= StructType PointerList 
            {
              Type RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Vector _2 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = ((MyParser) parser).DoPointer(_1,_2);    // gotta do something here!
                    
              CUP$parser$result = new java_cup.runtime.Symbol(67/*DecoratedType*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // DecoratedType ::= DecoratedBasicType 
            {
              Type RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(67/*DecoratedType*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Type ::= StructType 
            {
              Type RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(66/*Type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Type ::= DecoratedType 
            {
              Type RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(66/*Type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // FuncDecl ::= T_EXTERN T_FUNCTION T_COLON ReturnType T_ID NT$16 T_LPAREN OptParamList T_RPAREN NT$17 T_SEMI 
            {
              Object RESULT = null;
              // propagate RESULT from NT$16
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
              // propagate RESULT from NT$17
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int _4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int _4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Vector _4 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(6/*FuncDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // NT$17 ::= 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int _4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector _4 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

                        ((MyParser) parser).DoFormalParams(_4);
                        ((MyParser) parser).DoFuncDecl_2();
                    
              CUP$parser$result = new java_cup.runtime.Symbol(98/*NT$17*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // NT$16 ::= 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

                        ((MyParser) parser).DoFuncDecl_1(_3,_1);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(97/*NT$16*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // FuncDef ::= T_FUNCTION T_COLON ReturnType OptRef T_ID NT$13 T_LPAREN OptParamList T_RPAREN NT$14 T_LBRACE OptStmtList NT$15 T_RBRACE 
            {
              Object RESULT = null;
              // propagate RESULT from NT$13
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
              // propagate RESULT from NT$14
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
              // propagate RESULT from NT$15
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		Object _2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int _4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int _4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Vector _4 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int _5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Vector _5 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(5/*FuncDef*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // NT$15 ::= 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object _2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int _4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int _4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Vector _4 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int _5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Vector _5 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

                        
                        RESULT =((MyParser) parser).MissingReturnStmt(_1, _5);

                        ((MyParser) parser).DoFuncDecl_2();
                    
              CUP$parser$result = new java_cup.runtime.Symbol(96/*NT$15*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // NT$14 ::= 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object _2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int _4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector _4 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

                        ((MyParser) parser).DoFormalParams(_4);
                    
                    
              CUP$parser$result = new java_cup.runtime.Symbol(95/*NT$14*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // NT$13 ::= 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object _2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

                        ((MyParser) parser).SaveLineNum ();
                        ((MyParser) parser).DoFuncDecl_3(_3,_1,_2);
                        
                    
              CUP$parser$result = new java_cup.runtime.Symbol(94/*NT$13*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // FieldFuncDecl ::= FuncDef 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(21/*FieldFuncDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // FieldFuncsList ::= FieldFuncsList FieldFuncDecl 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(20/*FieldFuncsList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // FieldFuncsList ::= FieldFuncDecl 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(20/*FieldFuncsList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // OptFieldFuncsList ::= 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(19/*OptFieldFuncsList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // OptFieldFuncsList ::= FieldFuncsList 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(19/*OptFieldFuncsList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // DtorDef ::= T_TILDE T_ID_U NT$12 T_LPAREN T_RPAREN T_LBRACE OptStmtList T_RBRACE 
            {
              Object RESULT = null;
              // propagate RESULT from NT$12
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		
                        ((MyParser) parser).DoFuncDecl_2();
                    
              CUP$parser$result = new java_cup.runtime.Symbol(13/*DtorDef*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // NT$12 ::= 
            {
              Object RESULT = null;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

                        ((MyParser) parser).SaveLineNum ();
                        ((MyParser) parser).DoStructorDecl("~" + _3);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(93/*NT$12*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // CtorDef ::= T_ID_U NT$10 T_LPAREN OptParamList T_RPAREN NT$11 T_LBRACE OptStmtList T_RBRACE 
            {
              Object RESULT = null;
              // propagate RESULT from NT$10
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
              // propagate RESULT from NT$11
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int _4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int _4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Vector _4 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		
                        ((MyParser) parser).DoFuncDecl_2();
                    
              CUP$parser$result = new java_cup.runtime.Symbol(12/*CtorDef*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // NT$11 ::= 
            {
              Object RESULT = null;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int _4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector _4 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

                        ((MyParser) parser).DoFormalParams(_4);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(92/*NT$11*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // NT$10 ::= 
            {
              Object RESULT = null;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

                        ((MyParser) parser).SaveLineNum ();
                        ((MyParser) parser).DoStructorDecl(_3);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(91/*NT$10*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // CtorDtorDecl ::= DtorDef 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(18/*CtorDtorDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // CtorDtorDecl ::= CtorDef 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(18/*CtorDtorDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // CtorDtorList ::= CtorDtorList CtorDtorDecl 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(17/*CtorDtorList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // CtorDtorList ::= CtorDtorDecl 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(17/*CtorDtorList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // OptCtorDtorList ::= 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(16/*OptCtorDtorList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // OptCtorDtorList ::= CtorDtorList 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(16/*OptCtorDtorList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // FieldVarDecl ::= DecoratedType T_ID OptArrayList T_SEMI 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String _2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector _3 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        ((MyParser) parser).DoStructVarDecl(_1,_2,_3);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(15/*FieldVarDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // FieldVarsList ::= FieldVarsList FieldVarDecl 
            {
              Vector RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(75/*FieldVarsList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // FieldVarsList ::= FieldVarDecl 
            {
              Vector RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(75/*FieldVarsList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // StructdefDecl ::= T_STRUCTDEF T_ID_U T_LBRACE NT$7 FieldVarsList OptCtorDtorList NT$8 OptFieldFuncsList NT$9 T_RBRACE T_SEMI 
            {
              Object RESULT = null;
              // propagate RESULT from NT$7
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
              // propagate RESULT from NT$8
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
              // propagate RESULT from NT$9
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(11/*StructdefDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // NT$9 ::= 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;

                        ((MyParser) parser).IsInStruct();
                        ((MyParser) parser).getStructScope();
                        ((MyParser) parser).DoBlockClose();
                        ((MyParser) parser).DoStructdefDecl (_1);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(90/*NT$9*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // NT$8 ::= 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

                        // Put logic here to create default ctor if needed

                        ((MyParser) parser).getStructScope();
                        ((MyParser) parser).DoDefaultConstructor();


                    
              CUP$parser$result = new java_cup.runtime.Symbol(89/*NT$8*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // NT$7 ::= 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

                        ((MyParser) parser).DoBlockOpen();
                        ((MyParser) parser).IsInStruct();
                        ((MyParser) parser).SelfStruct(_1);
                        ((MyParser) parser).getStructScope();
                        ((MyParser) parser).DoStructName(_1);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(88/*NT$7*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // OptStatic ::= 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(10/*OptStatic*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // OptStatic ::= T_STATIC 
            {
              Object RESULT = null;
		
                        RESULT = "static";
                    
              CUP$parser$result = new java_cup.runtime.Symbol(10/*OptStatic*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ConstDecl ::= OptStatic T_CONST T_AUTO T_ID T_ASSIGN ConstExpr NT$6 T_SEMI 
            {
              Object RESULT = null;
              // propagate RESULT from NT$6
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object _1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int _5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object _5 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(9/*ConstDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // NT$6 ::= 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object _1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object _5 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;


                        ((MyParser) parser).DoAutoDecl ((String)_1,_3,(STO)_5); // changed, might need add OptStatic for future use
                    
              CUP$parser$result = new java_cup.runtime.Symbol(87/*NT$6*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ConstDecl ::= OptStatic T_CONST BasicType T_ID T_ASSIGN ConstExpr NT$5 T_SEMI 
            {
              Object RESULT = null;
              // propagate RESULT from NT$5
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object _1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Type _2 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int _5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object _5 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(9/*ConstDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // NT$5 ::= 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object _1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Type _2 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object _5 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

                        ((MyParser) parser).DoConstDecl2 ((String)_1,_3,_2,(STO)_5); // changed
                    
              CUP$parser$result = new java_cup.runtime.Symbol(86/*NT$5*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // VarDecl ::= OptStatic StructType T_ID OptArrayList OptCtorCall NT$4 T_SEMI 
            {
              Object RESULT = null;
              // propagate RESULT from NT$4
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object _1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Type _2 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int _4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int _4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Vector _4 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int _5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object _5 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(8/*VarDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // NT$4 ::= 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object _1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Type _2 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector _4 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object _5 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

                        ((MyParser) parser).DoCtorStructs(_3,_2,_4,((Vector<STO>)_5)); // changed
                    
              CUP$parser$result = new java_cup.runtime.Symbol(85/*NT$4*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // VarDecl ::= OptStatic T_AUTO T_ID T_ASSIGN Expr NT$3 T_SEMI 
            {
              Object RESULT = null;
              // propagate RESULT from NT$3
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object _1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int _5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _5 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(8/*VarDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // NT$3 ::= 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object _1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _5 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

                        ((MyParser) parser).DoVarDecl ((String)_1,_3,_5); // changed again
                    
              CUP$parser$result = new java_cup.runtime.Symbol(84/*NT$3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // VarDecl ::= OptStatic DecoratedType T_ID OptArrayList OptInit NT$2 T_SEMI 
            {
              Object RESULT = null;
              // propagate RESULT from NT$2
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object _1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Type _2 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int _4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int _4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Vector _4 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int _5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object _5 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(8/*VarDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // NT$2 ::= 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object _1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Type _2 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector _4 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object _5 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

                        ((MyParser) parser).DoVarDecl2 (((String)_1),_3,_2,_4,((STO)_5)); //Done

                    
              CUP$parser$result = new java_cup.runtime.Symbol(83/*NT$2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ExternDecl ::= T_EXTERN DecoratedBasicType T_ID OptArrayList NT$1 T_SEMI 
            {
              Object RESULT = null;
              // propagate RESULT from NT$1
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Type _2 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int _4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Vector _4 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(7/*ExternDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // NT$1 ::= 
            {
              Object RESULT = null;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type _2 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Vector _4 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

                        ((MyParser) parser).DoExternDecl (_3,_2); // Changed
                    
              CUP$parser$result = new java_cup.runtime.Symbol(82/*NT$1*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // GlobalDecl ::= FuncDef 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(4/*GlobalDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // GlobalDecl ::= FuncDecl 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(4/*GlobalDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // GlobalDecl ::= StructdefDecl 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(4/*GlobalDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // GlobalDecl ::= ConstDecl 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(4/*GlobalDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // GlobalDecl ::= VarDecl 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(4/*GlobalDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // GlobalDecl ::= ExternDecl 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(4/*GlobalDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // GlobalDecls ::= GlobalDecls GlobalDecl 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(3/*GlobalDecls*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // GlobalDecls ::= GlobalDecl 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(3/*GlobalDecls*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // OptGlobalDecls ::= 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(2/*OptGlobalDecls*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // OptGlobalDecls ::= GlobalDecls 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(2/*OptGlobalDecls*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // $START ::= Program EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Program ::= NT$0 OptGlobalDecls 
            {
              Object RESULT = null;
              // propagate RESULT from NT$0
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        ((MyParser) parser).DoProgramEnd();
                    
              CUP$parser$result = new java_cup.runtime.Symbol(1/*Program*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // NT$0 ::= 
            {
              Object RESULT = null;

                        ((MyParser) parser).DoProgramStart(); 
                    
              CUP$parser$result = new java_cup.runtime.Symbol(81/*NT$0*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

